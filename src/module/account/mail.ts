import { InlineKeyboard, MessageContext } from "puregram"
import prisma from "../prisma"
import { Logger, Online_Set, Send_Message, Send_Message_NotSelf, User_Banned } from "../helper"
import { Mail } from "@prisma/client"
import { Censored_Activation_Pro } from "../other/censored"
import { chat_id_system } from "../.."

export async function Mail_Self(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
	if (!user_check) { return }
    const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    if (!blank_check) { return await Send_Message(context, `–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—á—Ç–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é "üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞" –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !–∞–Ω–∫–µ—Ç–∞ –≤ —á–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`)}
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
	await Online_Set(context)
	let mail_build = null
	for (const mail of await prisma.mail.findMany({ where: { blank_to: blank_check.id, read: false, find: true } })) {
		mail_build = mail
        break
	}
    const keyboard_end_blank_query = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
        ]
    ])
    if (!mail_build) { return await Send_Message(context, `üòø –ü–∏—Å—å–º–∞ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`, keyboard_end_blank_query) }
	await Logger(`(private chat) ~ starting check self mail by <user> ‚Ññ${context.senderId}`)
	const selector: Mail = mail_build
	const blank_to_check = await prisma.blank.findFirst({ where: { id: selector.blank_to } })
	const blank_from_check = await prisma.blank.findFirst({ where: { id: selector.blank_from } })
    const keyboard_mail_fail = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: `üì¨ –î–∞–ª—å—à–µ`, payload: { cmd: 'mail_self' } })
        ]
    ])
	if (!blank_to_check || !blank_from_check) { 
		const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
		return await Send_Message(context, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞—à–∞ –∏–ª–∏ –æ–ø–æ–Ω–Ω–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `, keyboard_mail_fail)
	}
	const account_to = await prisma.account.findFirst({ where: { id: blank_to_check.id_account } })
	const account_from = await prisma.account.findFirst({ where: { id: blank_from_check.id_account } })
	if (!account_to || !account_from) {
		const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
		return await Send_Message(context, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞c –∏–ª–∏ –æ–ø–æ–Ω–Ω–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `, keyboard_mail_fail)
	}
	let censored = user_check.censored ? await Censored_Activation_Pro(blank_from_check.text) : blank_from_check.text
	//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
	const text = `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–≤—Ç–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã:\n üìú –ê–Ω–∫–µ—Ç–∞: ${blank_from_check.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const keyboard = InlineKeyboard.keyboard([
        [ 
            InlineKeyboard.textButton({ text: '‚õî –ù–∞–ª–µ–≤–æ', payload: { cmd: 'mail_unlike', idm: selector.id } }),
            InlineKeyboard.textButton({ text: `‚úÖ –ù–∞–ø—Ä–∞–≤–æ`, payload: { cmd: 'mail_like', idm: selector.id } })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
        ]
    ])
    await Send_Message(context, text, keyboard)
    await Logger(`(private chat) ~ finished check self mail by <user> ‚Ññ${context.chat.id}`)
}

export async function Mail_Like(context: MessageContext, queryPayload: any) {
    const mail_nice = await prisma.mail.findFirst({ where: { id: queryPayload.idm, read: false, find: true }})
    if (!mail_nice) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_nice = await prisma.blank.findFirst({ where: { id: mail_nice.blank_from } })
    if (!blank_nice) { return }
    const user_nice = await prisma.account.findFirst({ where: { id: blank_nice.id_account } })
    if (!user_nice) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–º —Å–µ–±—è –∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    const user_self = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_self) { return }
    const blank_self = await prisma.blank.findFirst({ where: { id_account: user_self.id } })
    if (!blank_self) { return }
    // –ª–∞–π–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É –≤ –ø–æ—á—Ç–µ
    await Online_Set(context)
    const mail_skip = await prisma.mail.update({ where: { id: queryPayload.idm }, data: { read: true, status: true } })
    await Send_Message(context, `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id}, –∑–Ω–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_self.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å @${user_nice.username}!`)
    await Send_Message_NotSelf(Number(user_nice.idvk), `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_self.id}, –∑–Ω–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_nice.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å @${user_self.username}!`)
    const ans_selector = `üåê –ê–Ω–∫–µ—Ç—ã ‚Ññ${blank_nice.id} + ‚Ññ${blank_self.id} = [—Ä–æ–ª–µ–≤–∏–∫–∏ –Ω–∏–∫–æ–≥–¥–∞]!`
    await Send_Message_NotSelf(Number(chat_id_system), ans_selector)
    await Logger(`(private chat) ~ clicked like for <blank> #${blank_nice.id} by <user> ‚Ññ${context.senderId}`)
    await Mail_Self(context)
}

export async function Mail_Unlike(context: MessageContext, queryPayload: any) {
    const mail_nice = await prisma.mail.findFirst({ where: { id: queryPayload.idm, read: false, find: true }})
    if (!mail_nice) { return }
    await Online_Set(context)
    const mail_skip = await prisma.mail.update({ where: { id: queryPayload.idm }, data: { read: true } })
    await Send_Message(context, `‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É #${mail_nice.blank_from} –ø–æ–ª–Ω–æ—Å—Ç—å—é.`)
    await Logger(`(private chat) ~ clicked unlike for <blank> #${mail_nice.blank_to} by <user> ‚Ññ${context.senderId}`)
    await Mail_Self(context)
}