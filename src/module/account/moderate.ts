import { InlineKeyboard, MessageContext } from "puregram"
import prisma from "../prisma"
import { Accessed, Logger, Send_Message, Send_Message_NotSelf, User_Banned } from "../helper"
import { Blank, Mail } from "@prisma/client"
import { Censored_Activation_Pro } from "../other/censored"

export async function Moderate_Self(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
	if (!user_check) { return }
	//await Online_Set(context)
    if (await Accessed(context) == 'user') { return }
	let mail_build = null
	for (const blank of await prisma.blank.findMany({ where: { banned: true } })) {
		mail_build = blank
        break
	}
    const keyboard_end_blank_query = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
        ]
    ])
    if (!mail_build) { return await Send_Message(context, `üòø –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`, keyboard_end_blank_query) }
	await Logger(`(private chat) ~ starting check banned blanks by <admin> ‚Ññ${context.senderId}`)
	const selector: Blank = mail_build

    for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
        const user = await prisma.account.findFirst({ where: { id: report.id_account } })
        await Send_Message(context, `üóø –ñ–∞–ª–æ–±–∞ –æ—Ç @${user?.username}(–ö—Ä—ã—Å–∞–•):\nüí¨ –ó–∞—è–≤–ª–µ–Ω–∏–µ: ${report.text}\n\n`)
    }
    const user_warned = await prisma.account.findFirst({ where: { id: selector.id_account } })
	const text = `‚öñ –í–µ—Ä—à–∏—Ç—Å—è —Å—É–¥ –Ω–∞–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–æ–π –∏ –µ–µ –∞–≤—Ç–æ—Ä–æ–º:\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüë§ –ê–≤—Ç–æ—Ä: @${user_warned?.username}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${selector.text}`
    //–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
    const keyboard = InlineKeyboard.keyboard([
        [ 
            InlineKeyboard.textButton({ text: '‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', payload: { cmd: 'moderate_denied', idb: selector.id } }),
            InlineKeyboard.textButton({ text: `‚úÖ –ó–∞–≤–µ—Ä–∏—Ç—å`, payload: { cmd: 'moderate_success', idb: selector.id } })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
        ]
    ])
    await Send_Message(context, text, keyboard)
    await Logger(`(private chat) ~ finished check banned blanks by <admin> ‚Ññ${context.chat.id}`)
}

export async function Moderate_Success(context: MessageContext, queryPayload: any) {
    const blank_report_check = await prisma.blank.findFirst({ where: { id: queryPayload.idb } })
    if (!blank_report_check) { return }
    if (!blank_report_check.banned) { return }
    const user_report_check = await prisma.account.findFirst({ where: { id: blank_report_check.id_account } })
    if (!user_report_check) { return }
    for (const report of await prisma.report.findMany({ where: { id_blank: blank_report_check.id, status: 'wait' } })) {
        await prisma.report.update({ where: { id: report.id }, data: { status: 'success'}})
        const user = await prisma.account.findFirst({ where: { id: report.id_account } })
        await Send_Message_NotSelf(Number(user!.idvk), `‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${blank_report_check.id} –ø—Ä–∏–Ω—è—Ç–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–ª—É–∂–±—É.`)
    }
    const warn_skip = await prisma.blank.delete({ where: { id: blank_report_check.id } })
    await Send_Message_NotSelf(Number(user_report_check.idvk), `‚õî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_report_check.id} –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω–µ–π, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—Å –Ω–∞ —É—á–µ—Ç.`)
	await Logger(`(private chat) ~ warn success for <blank> #${blank_report_check.id} by <admin> ‚Ññ${context.chat.id}`)
	await Send_Message(context, `‚úÖ –í—ã–¥–∞–ª–∏ –ø—Ä–µ–¥ –≤–ª–∞–¥–µ–ª—å—Ü—É –∞–Ω–∫–µ—Ç—ã #${blank_report_check.id}`)
    await Moderate_Self(context)
}

export async function Moderate_Denied(context: MessageContext, queryPayload: any) {
    const blank_report_check = await prisma.blank.findFirst({ where: { id: queryPayload.idb } })
    if (!blank_report_check) { return }
    if (!blank_report_check.banned) { return }
    const user_report_check = await prisma.account.findFirst({ where: { id: blank_report_check.id_account } })
    if (!user_report_check) { return }
    for (const report of await prisma.report.findMany({ where: { id_blank: blank_report_check.id, status: 'wait' } })) {
        await prisma.report.update({ where: { id: report.id }, data: { status: 'denied'}})
        const user = await prisma.account.findFirst({ where: { id: report.id_account } })
        await Send_Message_NotSelf(Number(user!.idvk), `‚õî –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${blank_report_check.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
    }
    const warn_skip = await prisma.blank.update({ where: { id: blank_report_check.id }, data: { banned: false } })
    await Send_Message_NotSelf(Number(user_report_check.idvk), `‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_report_check.id} –±—ã–ª–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞, –¥–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
	await Logger(`(private chat) ~ unlock for <blank> #${blank_report_check.id} by <admin> ‚Ññ${context.chat.id}`)
	await Send_Message(context, `‚úÖ –û–ø—Ä–∞–≤–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${blank_report_check.id}`)
    await Moderate_Self(context)
}