import { InlineKeyboard, InlineKeyboardBuilder, MessageContext } from "puregram";
import prisma from "../prisma";
import { Accessed, Logger, Online_Set, Send_Message, User_Banned } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { getTagById } from "../datacenter/tag";

export async function Blank_Self(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    const keyboard = new InlineKeyboardBuilder()
    if (blank_check) { 
        keyboard.textButton({ text: '‚õî –£–¥–∞–ª–∏—Ç—å', payload: { cmd: 'blank_delete' } })
        .textButton({ text: '‚úè –ò–∑–º–µ–Ω–∏—Ç—å', payload: { cmd: 'blank_edit_prefab_input_on' } }).row()
        .textButton({ text: 'üß≤ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥–∏', payload: { cmd: 'tagator_blank_config' } })
    } else {
        keyboard.textButton({ text: '‚ûï –°–æ–∑–¥–∞—Ç—å', payload: { cmd: 'blank_create' } })
    }
    keyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    let answer = ''
	if (!blank_check) {
		await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
		answer = `‚ö† –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ñ–∏–≥`
	} else {
		const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		await Logger(`(private chat) ~ starting self blank is viewed by <user> ‚Ññ${context.chat.id}`)
		if (blank) {
			const count_vision = await prisma.vision.count({ where: { id_blank: blank.id } })
			const count_max_vision = await prisma.blank.count({})
			const count_success = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: true }})
			const count_ignore = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: false }})
			const count_wrong = await prisma.mail.count({ where: { blank_to: blank.id, read: true, find: false }})
			const count_unread = await prisma.mail.count({ where: { blank_to: blank.id, read: false }})
			const counter_warn = await prisma.report.count({ where: { id_blank: blank.id } })
			let censored = user_check.censored ? await Censored_Activation_Pro(blank.text) : blank.text
			answer = `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${-1+count_max_vision}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`
		}
	}
    await Send_Message(context, `${answer}`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Blank_Create(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    const keyboard = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É', payload: { cmd: 'blank_create_prefab_input_on' } })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
        ]
    ])
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∞–Ω–∫–µ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}
export async function Tagator_Blank_Config(context: MessageContext, queryPayload: any) {
    //console.log(context)
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    if (blank_check.tag == null) { await prisma.blank.update({ where: { id: blank_check.id }, data: { tag: JSON.stringify([]) } })} 
    let tag = blank_check.tag != null ? JSON.parse(blank_check.tag ?? []) : []
    const id_tag = queryPayload.id ? Number(queryPayload.id) : null
    const tag_sel = queryPayload.id && id_tag ? await getTagById(id_tag) : null
    if (tag_sel) { 
        if (tag.includes(id_tag)) {
            tag = tag.filter((selectedId: any) => selectedId !== id_tag);
        } else {
            tag = [...tag, id_tag];
        }
        await prisma.blank.update({ where: { id: blank_check.id }, data: { tag: JSON.stringify(tag) } })
    }
    let tags = ''
    for (const i of tag) {
        console.log(i)
        tags += `${await getTagById(i)} `
    }
    await Send_Message(context, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏ –Ω–∞—Ñ–∏–≥: ${tags}`)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '#—Ñ–∞–Ω–¥–æ–º', payload: { cmd: 'tagator_blank_config', id: 1 } })
    .textButton({ text: '#–æ—Ä–∏–¥–∂–∏–Ω–∞–ª', payload: { cmd: 'tagator_blank_config', id: 2 } }).row()

    .textButton({ text: '#–Ω–∞—É—á–Ω–∞—è_—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_blank_config', id: 3 } })
    .textButton({ text: '#—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_blank_config', id: 4 } }).row()
    .textButton({ text: '#—Ñ—ç–Ω—Ç–µ–∑–∏', payload: { cmd: 'tagator_blank_config', id: 5 } })
    .textButton({ text: '#–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', payload: { cmd: 'tagator_blank_config', id: 6} })
    .textButton({ text: '#–≤–æ–µ–Ω–Ω–æ–µ', payload: { cmd: 'tagator_blank_config', id: 7 } }).row()
    .textButton({ text: '#–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ', payload: { cmd: 'tagator_blank_config', id: 8 } })
    .textButton({ text: '#–¥–µ—Ç–µ–∫—Ç–∏–≤', payload: { cmd: 'tagator_blank_config', id: 9 } })
    .textButton({ text: '#–∫—Ä–∏–º–∏–Ω–∞–ª', payload: { cmd: 'tagator_blank_config', id: 10 } }).row()
    .textButton({ text: '#—ç–∫—à–µ–Ω', payload: { cmd: 'tagator_blank_config', id: 11 } })
    .textButton({ text: '#—É–∂–∞—Å—ã', payload: { cmd: 'tagator_blank_config', id: 12 } })
    .textButton({ text: '#–¥—Ä–∞–º–∞', payload: { cmd: 'tagator_blank_config', id: 13 } })
    .textButton({ text: '#–º–∏—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_blank_config', id: 14 } }).row()
    .textButton({ text: '#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', payload: { cmd: 'tagator_blank_config', id: 15 } })
    .textButton({ text: '#–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', payload: { cmd: 'tagator_blank_config', id: 16 } }).row()
    .textButton({ text: '#—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', payload: { cmd: 'tagator_blank_config', id: 17 } })
    .textButton({ text: '#–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–∏–≥—Ä–∞', payload: { cmd: 'tagator_blank_config', id: 18 } }).row()

    .textButton({ text: '#—Ñ—É—Ä—Ä–∏', payload: { cmd: 'tagator_blank_config', id: 19 } })
    .textButton({ text: '#–æ–º–µ–≥–∞–≤–µ—Ä—Å', payload: { cmd: 'tagator_blank_config', id: 20 } }).row()
    .textButton({ text: '#–ø–æ—Å—Ç–µ–ª—å–Ω—ã–µ_—Å—Ü–µ–Ω—ã', payload: { cmd: 'tagator_blank_config', id: 21 } })
    .textButton({ text: '#–ø–µ—Ä–µ–ø–∏—Ö–æ–Ω', payload: { cmd: 'tagator_blank_config', id: 22 } }).row()

    .textButton({ text: '#14+', payload: { cmd: 'tagator_blank_config', id: 23 } })
    .textButton({ text: '#16+', payload: { cmd: 'tagator_blank_config', id: 24 } })//.row()
    .textButton({ text: '#18+', payload: { cmd: 'tagator_blank_config', id: 25 } })
    .textButton({ text: '#18++', payload: { cmd: 'tagator_blank_config', id: 26 } }).row()

    .textButton({ text: '#–º—Å–∫/–º—Å–∫-1', payload: { cmd: 'tagator_blank_config', id: 27 } })
    .textButton({ text: '#–º—Å–∫+1/2/3', payload: { cmd: 'tagator_blank_config', id: 28 } }).row()
    .textButton({ text: '#–º—Å–∫+4/5/6', payload: { cmd: 'tagator_blank_config', id: 29 } })
    .textButton({ text: '#–º—Å–∫+7/8/9', payload: { cmd: 'tagator_blank_config', id: 30 } }).row()

    .textButton({ text: '#–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_blank_config', id: 31 } })
    .textButton({ text: '#—Å—Ä–µ–¥–Ω–µ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_blank_config', id: 32 } }).row()
    .textButton({ text: '#–º–∞–ª–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_blank_config', id: 33 } })
    .textButton({ text: '#—Ä–∞–∑–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_blank_config', id: 34 } }).row()

    .textButton({ text: '#—Ä–µ–∞–ª', payload: { cmd: 'tagator_blank_config', id: 35 } })
    .textButton({ text: '#–≤–Ω–µ—Ä–æ–ª–µ–≤–æ–µ_–æ–±—â–µ–Ω–∏–µ', payload: { cmd: 'tagator_blank_config', id: 36 } }).row()
    .textButton({ text: '#–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π_—Å—Ç–∏–ª—å', payload: { cmd: 'tagator_blank_config', id: 37 } })
    .textButton({ text: '#–ø–æ–ª—É—Ä–æ–ª', payload: { cmd: 'tagator_blank_config', id: 38 } }).row()

    .textButton({ text: '#–¥–∂–µ–Ω', payload: { cmd: 'tagator_blank_config', id: 39 } })
    .textButton({ text: '#–≥–µ—Ç', payload: { cmd: 'tagator_blank_config', id: 40 } })//.row()
    .textButton({ text: '#—Å–ª—ç—à', payload: { cmd: 'tagator_blank_config', id: 41 } })
    .textButton({ text: '#—Ñ–µ–º—Å–ª—ç—à', payload: { cmd: 'tagator_blank_config', id: 42 } }).row()

    .textButton({ text: '#–∞–∫—Ç–∏–≤', payload: { cmd: 'tagator_blank_config', id: 43 } })
    .textButton({ text: '#–ø–∞—Å—Å–∏–≤', payload: { cmd: 'tagator_blank_config', id: 44 } })
    .textButton({ text: '#—É–Ω–∏–≤–µ—Ä—Å–∞–ª', payload: { cmd: 'tagator_blank_config', id: 45 } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }).row()
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ç–µ–≥–∞—Ç–æ—Ä–∞`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}
export async function Blank_Create_Prefab_Input_ON(context: MessageContext) {
    if (!context.chat.username) {
        return await Send_Message(context, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_create_prefab_input_off'

	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –í–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –Ω–∞—Ñ–∏–≥`, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Blank_Edit_Prefab_Input_ON(context: MessageContext) {
    if (!context.chat.username) {
        return await Send_Message(context, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_edit_prefab_input_off'

	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É:`, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}
export async function Blank_Delete(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    const keyboard = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
        ]
    ])
    const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
    if (blank_delete) { 
        await Send_Message(context, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_delete.text}`, keyboard)
        await Logger(`(private chat) ~ deleted self <blank> #${blank_delete.id} by <user> ‚Ññ${context.senderId}`)
    }
}

export async function Censored_Change(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const censored_change = await prisma.account.update({ where: { id: user_check.id }, data: { censored: user_check.censored ? false : true } })
    if (censored_change) { 
        const keyboard = InlineKeyboard.keyboard([
            [
                InlineKeyboard.textButton({ text: '‚úÖ –í –º–µ–Ω—é', payload: { cmd: 'main_menu' } })
            ]
        ])
        await Send_Message(context, `üîß –¶–µ–Ω–∑—É—Ä–∞ ${censored_change.censored ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`, keyboard)
        await Logger(`(private chat) ~ changed status activity censored self by <user> ‚Ññ${context.chat.id}`)
    }
}