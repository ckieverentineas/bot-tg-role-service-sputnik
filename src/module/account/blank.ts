import { InlineKeyboard, InlineKeyboardBuilder, MessageContext } from "puregram";
import prisma from "../prisma";
import { Accessed, Logger, Online_Set, Send_Message, User_Banned, Verify_User } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { getTagById, keyboard_back, Keyboard_Tag_Constructor } from "../datacenter/tag";

export async function Blank_Self(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    const keyboard = new InlineKeyboardBuilder()
    if (blank_check) { 
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Å—Ç–µ–º–ø–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        const datenow: any = new Date()
        const dateold: any = new Date(blank_check.crdate)
        const timeouter = 86400000
        keyboard.textButton({ text: '‚õî –£–¥–∞–ª–∏—Ç—å', payload: { cmd: 'blank_delete' } })
        if (datenow-dateold > timeouter) { keyboard.textButton({ text: '‚úè –ò–∑–º–µ–Ω–∏—Ç—å', payload: { cmd: 'blank_edit_prefab_input_on' } }).row() } else { keyboard.row() }
        keyboard.textButton({ text: 'üß≤ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥–∏', payload: { cmd: 'tagator_blank_config' } })
    } else {
        keyboard.textButton({ text: '‚ûï –°–æ–∑–¥–∞—Ç—å', payload: { cmd: 'blank_create' } })
    }
    keyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    let answer = ''
	if (!blank_check) {
        await Logger(`(blank config) ~ starting creation self <blank> for @${user_check.username}`)
		answer = `‚ö† –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ [‚ûï –°–æ–∑–¥–∞—Ç—å]`
	} else {
		const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		if (blank) {
			const count_vision = await prisma.vision.count({ where: { id_blank: blank.id } })
			const count_max_vision = await prisma.blank.count({})
			const count_success = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: true }})
			const count_ignore = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: false }})
			const count_wrong = await prisma.mail.count({ where: { blank_to: blank.id, read: true, find: false }})
			const count_unread = await prisma.mail.count({ where: { blank_to: blank.id, read: false }})
			const counter_warn = await prisma.report.count({ where: { id_blank: blank.id } })
			let censored = user_check.censored ? await Censored_Activation_Pro(blank.text) : blank.text
			answer = `üõ∞Ô∏è –ë–ª–∞–Ω–∫–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫ ¬´–ë—é—Ä–æ–∫—Ä–∞—Ç–∏—è-6000¬ª\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${-1+count_max_vision}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`
            await Logger(`(blank config) ~ show self <blank> #${blank.id} for @${user_check.username}`)
		}
	}
    await Send_Message(context, `${answer}`, keyboard)
}

export async function Blank_Create(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É', payload: { cmd: 'blank_create_prefab_input_on' } })
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∞–Ω–∫–µ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚úè –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É`, keyboard)
    await Logger(`(blank config) ~ init prefab for creation blank for @${user_check.username}`)
}
export async function Tagator_Blank_Config(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    const blank_check = user_verify.blank_check
    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (blank_check.tag == null) { await prisma.blank.update({ where: { id: blank_check.id }, data: { tag: JSON.stringify([]) } })} 
    // –ø–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ç–µ–≥–∞—Ç–æ—Ä–∞
    let tag = blank_check.tag != null ? JSON.parse(blank_check.tag ?? []) : []
    // –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã
    const id_tag = queryPayload.id ? Number(queryPayload.id) : null
    const tag_sel = queryPayload.id && id_tag ? await getTagById(id_tag) : null
    if (tag_sel) { 
        if (tag.includes(id_tag)) {
            tag = tag.filter((selectedId: any) => selectedId !== id_tag);
        } else {
            tag = [...tag, id_tag];
        }
        await prisma.blank.update({ where: { id: blank_check.id }, data: { tag: JSON.stringify(tag) } })
    }
    let tags = ''
    for (const i of tag) {
        //console.log(i)
        tags += `${await getTagById(i)} `
    }
    //await Send_Message(context, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏: ${tags}`)
    const keyboard = await Keyboard_Tag_Constructor(tag, 'tagator_blank_config', 'main_menu')
    await Send_Message(context, `üìé –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã (–¥–ª—è —Ç–µ–≥–∞—Ç–æ—Ä–∞)`, keyboard)
    await Logger(`(blank tagator config) ~ select favorite tag ${tag_sel} by @${user_check.username}`)
}
export async function Blank_Create_Prefab_Input_ON(context: MessageContext) {
    if (!context.chat.username) {
        return await Send_Message(context, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram')
    }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_create_prefab_input_off'
    await Send_Message(context, `üìé –í–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Ç 30 –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(blank config) ~ activation prefab input text for blank by @${user_check.username}`)
}

export async function Blank_Edit_Prefab_Input_ON(context: MessageContext) {
    if (!context.chat.username) {
        return await Send_Message(context, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram')
    }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_edit_prefab_input_off'
    await Send_Message(context, `üìé –í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –æ—Ç 30 –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:`, /*blank.photo*/)
    await Logger(`(blank config) ~ starting input text for blank by @${user_check.username}`)
}
export async function Blank_Delete(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
    if (blank_delete) { 
        await Send_Message(context, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_delete.text}`, keyboard_back)
        await Logger(`(blank config) ~ deleted self <blank> #${blank_delete.id} for @${user_check.username}`)
    }
}

export async function Censored_Change(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const censored_change = await prisma.account.update({ where: { id: user_check.id }, data: { censored: user_check.censored ? false : true } })
    if (censored_change) { 
        const keyboard = new InlineKeyboardBuilder()
        .textButton({ text: '‚úÖ –í –º–µ–Ω—é', payload: { cmd: 'main_menu' } })
        await Send_Message(context, `üîß –¶–µ–Ω–∑—É—Ä–∞ ${censored_change.censored ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`, keyboard)
        await Logger(`(profile config) ~ changed status activity censored self for @${user_check.username}`)
    }
}