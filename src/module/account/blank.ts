import { InlineKeyboard, MessageContext } from "puregram";
import prisma from "../prisma";
import { Accessed, Logger, Send_Message, User_Banned } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";

export async function Blank_Self(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return }
	//await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    const keyboard = InlineKeyboard.keyboard([
        (blank_check) ?
        [
          InlineKeyboard.textButton({ text: '‚õî –£–¥–∞–ª–∏—Ç—å', payload: 'blank_delete' }),
          InlineKeyboard.textButton({ text: '‚úè –ò–∑–º–µ–Ω–∏—Ç—å', payload: 'blank_edit' })
        ] :
        [
          InlineKeyboard.textButton({ text: '‚ûï –°–æ–∑–¥–∞—Ç—å', payload: 'blank_create' })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: 'main_menu' })
        ]
    ])
    let answer = ''
	if (!blank_check) {
		await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
		answer = `‚ö† –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ñ–∏–≥`
	} else {
		const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		await Logger(`(private chat) ~ starting self blank is viewed by <user> ‚Ññ${context.chat.id}`)
		if (blank) {
			const count_vision = await prisma.vision.count({ where: { id_blank: blank.id } })
			const count_max_vision = await prisma.blank.count({})
			const count_success = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: true }})
			const count_ignore = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: false }})
			const count_wrong = await prisma.mail.count({ where: { blank_to: blank.id, read: true, find: false }})
			const count_unread = await prisma.mail.count({ where: { blank_to: blank.id, read: false }})
			const counter_warn = await prisma.report.count({ where: { id_blank: blank.id } })
			let censored = user_check.censored ? await Censored_Activation_Pro(blank.text) : blank.text
			answer = `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${-1+count_max_vision}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`
		}
	}
    await Send_Message(context, `${answer}`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Blank_Create(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return }
	//await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    const keyboard = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É', payload: 'blank_create_prefab_input_on' })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: 'main_menu' })
        ]
    ])
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∞–Ω–∫–µ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Blank_Create_Prefab_Input_ON(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return }
	//await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (blank_check) { return }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_create_prefab_input_off'

	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –í–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –Ω–∞—Ñ–∏–≥`, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Blank_Delete(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return }
	//await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) {
        await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
        return
    }
    const keyboard = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: 'main_menu' })
        ]
    ])
    const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
    if (blank_delete) { 
        await Send_Message(context, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_delete.text}`, keyboard)
        await Logger(`(private chat) ~ deleted self <blank> #${blank_delete.id} by <user> ‚Ññ${context.senderId}`)
    }
}