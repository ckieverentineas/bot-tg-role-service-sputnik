import { MessageContext } from "puregram"
import prisma from "../prisma"
import { Accessed, Logger, Online_Set, Send_Message, User_Banned, Verify_User, Format_Text_With_Tags } from "../helper"
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr"
import { users_pk } from "../.."
import { getTagsForBlank, keyboard_back } from "../datacenter/tag" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keyboard_back
import { InlineKeyboardBuilder } from "puregram"

export async function Sniper_Research_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'sniper_research_prefab_input_off'
	users_pk[id].id_target = queryPayload.idb
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –≥–∏–ø–µ—Ä-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è ${await Accessed(context) != `user` ? '–±–∞–Ω—Ö–∞–º–º–µ—Ä,' : ''} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:`, /*blank.photo*/)
    await Logger(`(research sniper) ~ starting write target for sniper shot for <blank> #${queryPayload.idb} by @${user_self.username}`)
}

// --- –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–≥–æ–≤ –≤ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–æ–º —Ä–µ–∂–∏–º–µ ---
export async function Show_Tags_Sniper(context: MessageContext, queryPayload: any) {
    const tags = await getTagsForBlank(queryPayload.idb)
    const tagsText = tags.length ? tags.map((t: {name: string}) => `#${t.name}`).join("\n") : "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
    
    const keyboard = new InlineKeyboardBuilder()
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∫–µ—Ç–µ
        .textButton({ text: "‚¨Ö –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ", payload: { cmd: "sniper_research_show_blank", idb: queryPayload.idb } })

    await Send_Message(context, `üè∑ –¢–µ–≥–∏ –∞–Ω–∫–µ—Ç—ã #${queryPayload.idb}:\n\n${tagsText}`, keyboard)
    await Logger(`(research sniper) ~ show tags for <blank> #${queryPayload.idb}`)
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
export async function Sniper_Research_Show_Blank(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ ID
    const blank_check_notself = await prisma.blank.findFirst({ 
        where: { 
            id: queryPayload.idb,
            banned: false 
        } 
    })
    
    if (!blank_check_notself) {
        return await Send_Message(context,
            `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, –∞–Ω–∫–µ—Ç–∞ #${queryPayload.idb} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–∞`,
            keyboard_back)
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏
    const baseText = `üõ∞Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π —Ä–µ–∂–∏–º ¬´–°–Ω–∞–π–ø–µ—Ä-0000¬ª:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_check_notself.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_check_notself.text}`
    const tags = await getTagsForBlank(blank_check_notself.id)
    const { text, keyboard } = await Format_Text_With_Tags(context, baseText, blank_check_notself.id, tags)
    
    keyboard.textButton({ text: '‚õî –ú–∏–º–æ', payload: { cmd: 'blank_unlike', idb: blank_check_notself.id } })
    .textButton({ text: `‚úÖ –û—Ç–∫–ª–∏–∫`, payload: { cmd: 'blank_like', idb: blank_check_notself.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'sniper_research' } })
    
    if (user_check.donate == true) { 
        keyboard.textButton({ text: '‚úè –ü–∏—Å—å–º–æ', payload: { cmd: 'blank_like_don', idb: blank_check_notself.id  } }).row() 
    } else { 
        keyboard.row() 
    }
    
    keyboard.textButton({ text: '‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'blank_report', idb: blank_check_notself.id } })
    
    await Send_Message(context, `${text}`, keyboard)
    await Logger(`(research sniper) ~ show specific <blank> #${blank_check_notself.id} for @${user_check.username}`)
}