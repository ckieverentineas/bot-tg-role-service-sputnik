import { InlineKeyboardBuilder, MessageContext } from "puregram";
import prisma from "../prisma";
import { 
    Accessed, 
    Blank_Vision_Activity, 
    Logger, 
    Online_Set, 
    Send_Message, 
    Send_Message_NotSelf, 
    User_Banned, 
    Verify_Blank_Not_Self, 
    Verify_User, 
    Format_Text_With_Tags, 
    Blank_Cleaner 
} from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { Blank } from "@prisma/client";
import { keyboard_back, getTagsForBlank } from "../datacenter/tag";
import { Researcher_Better_Blank_Target } from "./reseacher_up";

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è chat_id_moderate
const chat_id_moderate = process.env.chat_id_moderate || '';

export async function Browser_Research(context: MessageContext) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∏—Å–∫–∞
    const isSubscribed = await checkSubscription(context.chat.id)
    if (!isSubscribed) {
        const keyboard = new InlineKeyboardBuilder()
            .urlButton({ text: 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: 'https://t.me/sputnik_signal' })
            .textButton({ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', payload: { cmd: 'check_subscription_browser' } })
        
        return await Send_Message(context, `‚ö† –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @sputnik_signal`, keyboard)
    }

    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'browser_research_prefab_input_off'
    
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –æ—Ç 3 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(research browser) ~ starting write prompt for browser search for @${user_check.username}`)
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(userId: number): Promise<boolean> {
  try {
    const member = await telegram.api.getChatMember({
      chat_id: '@sputnik_signal',
      user_id: userId
    })

    return member.status !== 'left' && member.status !== 'kicked'
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:`, error)
    return false
  }
}

export async function Browser_Research_Prefab_Input_Off(context: any, id: number) {
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'browser_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    
    if (text_input.length < 3) { 
        return await Send_Message(context, `‚ö† –ü—Ä–æ–º–ø—Ç –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat); 
    }
    if (text_input.length > 64) { 
        text_input = text_input.slice(0, 64);
    }
    
    await Send_Message(context, `‚åõ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–¥–±–∏—Ä–∞–µ–º –∞–Ω–∫–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${text_input}"...`)
    
    let blank_build: any[] = []
    
    for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
        if (blank.id_account == user_check.id) { continue }
        const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
        if (vision_check) { continue }
        
        const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
        const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: Number(user_bl_ch?.idvk) ?? 0 } })
        if (black_list_my) { continue }
        
        const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: Number(user_check.idvk) } })
        if (black_list_other) { continue }
        
        const result = await Researcher_Better_Blank_Target(text_input, blank);
        blank_build.push(result);
        
        blank_build.sort((a, b) => b.score - a.score)
        blank_build.length = Math.min(blank_build.length, 50);
    }
    
    if (blank_build.length === 0) {
        return await Send_Message(context, 
            `üòø –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${text_input}", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç.`, 
            keyboard_back)
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_pk[id].searchResults = blank_build;
    users_pk[id].searchQuery = text_input;
    users_pk[id].currentIndex = 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    const selector = blank_build[0]
    await Show_Browser_Blank(context, selector, user_check, blank_build, text_input)
    
    users_pk[id].operation = ''
    users_pk[id].text = ''
}

async function Show_Browser_Blank(context: MessageContext, selector: any, user_check: any, blank_build: any[], searchQuery: string) {
    const blank_check_notself = await prisma.blank.findFirst({ where: { id: selector.id } })
    if (!blank_check_notself) { 
        blank_build.shift()
        if (blank_build.length === 0) {
            return await Send_Message(context, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.`, keyboard_back)
        }
        return await Show_Browser_Blank(context, blank_build[0], user_check, blank_build, searchQuery)
    }

    let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const highlightedText = highlightText(censored, searchQuery);
    
    const baseText = `üõ∞Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π —Ä–µ–∂–∏–º ¬´–ë—Ä–∞—É–∑–µ—Ä-4000¬ª:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüîé –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(selector.score * 100).toFixed(2)}%\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${highlightedText}`
    const tags = await getTagsForBlank(selector.id)
    const { text, keyboard } = await Format_Text_With_Tags(context, baseText, selector.id, tags)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π query –¥–ª—è payload —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å BUTTON_DATA_INVALID
    const shortQuery = searchQuery.length > 30 ? searchQuery.substring(0, 30) + '...' : searchQuery;
    
    keyboard.textButton({ text: '‚õî –ú–∏–º–æ', payload: { cmd: 'browser_unlike', idb: selector.id } })
    .textButton({ text: `‚úÖ –û—Ç–∫–ª–∏–∫`, payload: { cmd: 'browser_like', idb: selector.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    
    if (user_check.donate == true) { 
        keyboard.textButton({ text: '‚úè –ü–∏—Å—å–º–æ', payload: { cmd: 'browser_like_don', idb: selector.id } }).row() 
    } else { 
        keyboard.row() 
    }
    
    keyboard.textButton({ text: '‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'browser_report', idb: selector.id } })

    const messageText = `${text}`;
    if (messageText.length > 4000) {
        const part1 = messageText.substring(0, 4000);
        const part2 = messageText.substring(4000);
        
        // –û–±–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å HTML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º
        await Send_Message(context, part1, undefined, { parse_mode: 'HTML' });
        await Send_Message(context, part2, keyboard, { parse_mode: 'HTML' });
    } else {
        await Send_Message(context, messageText, keyboard, { parse_mode: 'HTML' });
    }
            
    await Logger(`(research browser) ~ show <blank> #${selector.id} for @${user_check.username}`)
}

export async function Browser_Like(context: MessageContext, queryPayload: any) {
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    const blank_self = user_verify.blank_check
    
    const blank_verify = await Verify_Blank_Not_Self(context, queryPayload.idb)
    if (!blank_verify) { return }
    const user_nice = blank_verify.user_nice
    const blank_nice = blank_verify.blank_nice
    
    await Blank_Vision_Activity(context, queryPayload.idb, user_self)
    
    await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
    const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 }})
    
    if (mail_set) { 
        await Send_Message_NotSelf(Number(user_nice.idvk), `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) 
    }
    
    await Logger(`(research browser) ~ clicked swipe <blank> #${blank_nice.id} for @${user_self.username}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await Show_Next_Browser_Result(context, user_self)
}

export async function Browser_Unlike(context: MessageContext, queryPayload: any) {
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    
    await Blank_Vision_Activity(context, queryPayload.idb, user_self)
    
    await Send_Message(context, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${queryPayload.idb}.`)
    await Logger(`(research browser) ~ clicked unswipe for <blank> #${queryPayload.idb} for @${user_self.username}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await Show_Next_Browser_Result(context, user_self)
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async function Show_Next_Browser_Result(context: MessageContext, user_check: any) {
    const id = await User_Pk_Get(context);
    if (id == null) { return; }
    
    // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
    if (!users_pk[id]?.searchResults || users_pk[id].searchResults?.length === 0) {
        return await Send_Message(context, `üòø –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.`, keyboard_back);
    }
    
    users_pk[id].currentIndex = (users_pk[id].currentIndex || 0) + 1;
    
    if (users_pk[id].currentIndex >= users_pk[id].searchResults.length) {
        return await Send_Message(context, `üòø –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.`, keyboard_back);
    }
    
    const nextResult = users_pk[id].searchResults[users_pk[id].currentIndex];
    if (!nextResult) {
        return await Send_Message(context, `üòø –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.`, keyboard_back);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ searchQuery
    const searchQuery = users_pk[id].searchQuery || '';
    
    await Show_Browser_Blank(context, nextResult, user_check, users_pk[id].searchResults, searchQuery)
}

export async function Browser_Report(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_verify = await Verify_Blank_Not_Self(context, queryPayload.idb)
    if (!blank_verify) { return }
    const blank_report = blank_verify.blank_nice
    
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'browser_report_ION', idb: blank_report.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'browser_research' } })
    
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∂–∞–ª–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É [‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É]`, keyboard)
    await Logger(`(research browser) ~ show prefab for report on <blank> #${blank_report.id} by @${user_self.username}`)
}

export async function Browser_Report_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∂–∞–ª–æ–±—ã
    const report_check = await prisma.report.findFirst({ where: { id_blank: queryPayload.idb, id_account: user_self.id }})
    if (report_check) { 
        return await Send_Message(context, `‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É ${report_check.id_blank}`)
    }
    
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∂–∞–ª–æ–±—ã
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'browser_report_prefab_input_off'
    users_pk[id].id_target = queryPayload.idb
    
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –æ—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(research browser) ~ starting write report on <blank> #${queryPayload.idb} by @${user_self.username}`)
}

export async function Browser_Like_Donation_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –¥–æ–Ω–∞—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'browser_like_donation_prefab_input_off'
    users_pk[id].id_target = queryPayload.idb
    
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç 10 –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(research browser) ~ starting write message for donation like on <blank> #${queryPayload.idb} by @${user_self.username}`)
}

// --- –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–≥–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ---
export async function Show_Tags_Browser(context: MessageContext, queryPayload: any) {
    const tags = await getTagsForBlank(queryPayload.idb)
    const tagsText = tags.length ? tags.map((t: any) => `#${t.name}`).join("\n") : "–¢–µ–≥–æ–≤ –Ω–µ—Ç"
    
    const keyboard = new InlineKeyboardBuilder()
        .textButton({ text: "‚¨Ö –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ", payload: { cmd: "browser_research_show_blank", idb: queryPayload.idb } })

    await Send_Message(context, `üè∑ –¢–µ–≥–∏ –∞–Ω–∫–µ—Ç—ã #${queryPayload.idb}:\n\n${tagsText}`, keyboard)
    await Logger(`(research browser) ~ show tags for <blank> #${queryPayload.idb}`)
}

// --- —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ ---
export async function Browser_Research_Show_Blank(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ ID
    const blank_check_notself = await prisma.blank.findFirst({ 
        where: { 
            id: queryPayload.idb,
            banned: false 
        } 
    })
    
    if (!blank_check_notself) {
        return await Send_Message(context,
            `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, –∞–Ω–∫–µ—Ç–∞ #${queryPayload.idb} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–∞`,
            keyboard_back)
    }

    let censored = user_check.censored ? await Censored_Activation_Pro(blank_check_notself.text) : blank_check_notself.text
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏
    const baseText = `üõ∞Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π —Ä–µ–∂–∏–º ¬´–ë—Ä–∞—É–∑–µ—Ä-4000¬ª:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_check_notself.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const tags = await getTagsForBlank(blank_check_notself.id)
    const { text, keyboard } = await Format_Text_With_Tags(context, baseText, blank_check_notself.id, tags)
    
    keyboard.textButton({ text: '‚õî –ú–∏–º–æ', payload: { cmd: 'browser_unlike', idb: blank_check_notself.id } })
    .textButton({ text: `‚úÖ –û—Ç–∫–ª–∏–∫`, payload: { cmd: 'browser_like', idb: blank_check_notself.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    
    if (user_check.donate == true) { 
        keyboard.textButton({ text: '‚úè –ü–∏—Å—å–º–æ', payload: { cmd: 'browser_like_don', idb: blank_check_notself.id } }).row() 
    } else { 
        keyboard.row() 
    }
    
    keyboard.textButton({ text: '‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'browser_report', idb: blank_check_notself.id } })
    
    await Send_Message(context, `${text}`, keyboard)
    await Logger(`(research browser) ~ show specific <blank> #${blank_check_notself.id} for @${user_check.username}`)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è input.ts
export async function Browser_Report_Prefab_Input_Off(context: any, id: number) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –¥—Ä—É–≥–∏–º report —Ñ—É–Ω–∫—Ü–∏—è–º
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
        .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'browser_report_ION', idb: Number(users_pk[id].id_target) } }).row()
        .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'browser_research' } })
    
    if (!users_pk[id].id_target) return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã`, keyboard_back)
    if (text_input.length < 10) return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat)
    if (text_input.length > 2000) return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat)
    
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) return
    const user_warn = blank_verify.user_nice
    const blank_report_check = blank_verify.blank_nice
    
    const report_set = await prisma.report.create({ data: { id_blank: blank_report_check.id, id_account: user_check.id, text: text_input } })
    const counter_warn = await prisma.report.count({ where: { id_blank: blank_report_check.id, status: 'wait' } })
    
    await Send_Message_NotSelf(Number(user_warn.idvk), `‚úÖ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.\nüí° –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∂–Ω–æ–µ –æ–±–≤–∏–Ω–µ–Ω–∏–µ, —Ç–æ –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π –∂–∞–ª–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∞—Å.`)
    
    if (counter_warn >= 3) {
        await prisma.blank.update({ where: { id: blank_report_check.id }, data: { banned: true } })
        await Send_Message_NotSelf(Number(user_warn.idvk), `üö´ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã ${counter_warn}/3. –ò–∑—ã–º–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.`)
        await Send_Message_NotSelf(Number(chat_id_moderate), `‚ö† –ê–Ω–∫–µ—Ç–∞ #${blank_report_check.id} –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–±, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã!`)
    }
    
    await Blank_Vision_Activity(context, blank_report_check.id, user_check)
    const keyboard = new InlineKeyboardBuilder()
        .textButton({ text: 'üåê –ë—Ä–∞—É–∑–µ—Ä', payload: { cmd: 'browser_research' } }).row()
        .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    
    await Send_Message(context, `‚úÖ –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–æ—Å!`, keyboard)
    await Send_Message_NotSelf(Number(chat_id_moderate), `üß® –ù–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.`)
    
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(browser researcher) ~ report on <blank> #${blank_report_check.id} by @${user_check.username}`)
}

export async function Browser_Like_Donation_Prefab_Input_Off(context: any, id: number) {
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    const blank_self = user_verify.blank_check
    
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
        .textButton({ text: '‚úè –ü–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'browser_like_don', idb: Number(users_pk[id].id_target) } }).row()
        .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'browser_research' } })
    
    if (!users_pk[id].id_target) return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –ª–∞–π–∫–∞`, keyboard_back)
    if (text_input.length < 10) return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat)
    if (text_input.length > 3000) return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat)
    
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) return
    const user_nice = blank_verify.user_nice
    const blank_nice = blank_verify.blank_nice
    
    await Blank_Vision_Activity(context, blank_nice.id, user_self)
    
    const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 } })
    await Send_Message_NotSelf(Number(user_nice.idvk), `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`)
    await Send_Message_NotSelf(Number(user_nice.idvk), `‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${blank_self.id}: ${text_input}\n‚ö† –ß—Ç–æ–±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É #${blank_self.id}.`)
    await Send_Message_NotSelf(Number(chat_id_moderate), `‚öñÔ∏è #${blank_self.id} --> ${text_input} --> #${blank_nice.id}`)
    
    const keyboard = new InlineKeyboardBuilder()
        .textButton({ text: 'üß≠ –ë—Ä–∞—É–∑–µ—Ä', payload: { cmd: 'browser_research' } }).row()
        .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    
    await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º: ${text_input}`, keyboard)
    
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(browser researcher) ~ swipe like with message for <blank> #${blank_nice.id} by @${user_self.username}`)
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function highlightText(text: string, searchTerm: string): string {
    if (!searchTerm) return text;
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
    const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ê–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    const regex = new RegExp(`(${escapedSearchTerm})`, 'gi');
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫—Ä–æ–º–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const escapedText = (text);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ MarkdownV2
    return escapedText.replace(regex, '<b>$1</b>');
}