import { InlineKeyboard, MessageContext, InlineKeyboardBuilder } from "puregram";
import prisma from "../prisma";
import { Accessed, Logger, Online_Set, Send_Message, Send_Message_NotSelf, User_Banned } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { Blank } from "@prisma/client";
import { getTagById } from "../datacenter/tag";

export async function Tagator_Menu(context: MessageContext) {
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üöÄ –ü–æ–≥–Ω–∞–ª–∏ –°–£—Ä–ö–ò', payload: { cmd: 'tagator_research' } }).row()
    .textButton({ text: '‚úÖ –ò—Å–∫–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º', payload: { cmd: 'tagator_research_config_like' } }).row()
    .textButton({ text: '‚õî –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–≥–∏', payload: { cmd: 'tagator_research_config_unlike' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `üîé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É "–¢–µ–≥–∞—Ç–æ—Ä-3000", –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–æ–≥–æ –∏—â–∏—Ç–µ, –∏ –∏—Å–∫–ª—é—á–∏—Ç—å –∫–æ–≥–æ –≤–∞–º —Ç–æ—á–Ω–æ –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω–∞–¥–æ.`, keyboard)
}
export async function Tagator_Research(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
    const banned_me = await User_Banned(context)
    if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
    const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    if (!blank_check) { return await Send_Message(context, `‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    await Online_Set(context)
    let blank_build = null
    const tag_self_like = user_check.tag_like != null ? JSON.parse(user_check.tag_like ?? []) : []
    if (tag_self_like.length < 1) { return await Send_Message(context, `–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å`) }
    const tag_self_unlike = user_check.tag_unlike != null ? JSON.parse(user_check.tag_unlike ?? []) : []
    for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
        if (blank.id_account == user_check.id) { continue }
        const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
        if (vision_check) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
        const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: Number(user_bl_ch?.idvk) ?? 0 } })
        if (black_list_my) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: Number(user_check.idvk) } })
        if (black_list_other) { continue }
        // —Ç–µ–≥–æ—Å–≤–µ—Ä–∫–∞
        const tag_blank_pull = blank.tag != null ? JSON.parse(blank.tag ?? []) : []
        if (tag_blank_pull == null || tag_blank_pull.length < 1) { continue }
        // –∏—Å–∫–ª—é—á–∞–µ–º –∞–Ω–∫–µ—Ç—É —Å –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º–∏—Å—è —Ç–µ–≥–∞–º–∏
        let tr_unlike_blank = false
        for (const tag_s_un of tag_self_unlike) {
            if (tag_blank_pull.includes(tag_s_un)) {
                tr_unlike_blank = true
                break
            }
        }
        if (tr_unlike_blank) { continue }
        let tr_like_blank = false
        for (const tag_s_l of tag_self_like) {
            if (tag_blank_pull.includes(tag_s_l)) {
                tr_like_blank = true
                blank_build = blank
                break
            }
        }
        if (tr_like_blank) { break }
    }
    await Logger(`(private chat) ~ starting check random blank by <user> ‚Ññ${context.senderId}`)
    const keyboard_end_blank_query = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
        ]
    ])
    if (!blank_build) { return await Send_Message(context, `üòø –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏, –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ç–µ–≥–∏.`, keyboard_end_blank_query) }
    const selector: Blank = blank_build
    const blank_check_notself = await prisma.blank.findFirst({ where: { id: selector.id } })
    if (!blank_check_notself) { return await Send_Message(context, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `) }
    let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
    const text = `üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const keyboard = InlineKeyboard.keyboard([
        [ 
            InlineKeyboard.textButton({ text: '‚õî –ù–∞–ª–µ–≤–æ', payload: { cmd: 'tagator_unlike', idb: selector.id } }),
            InlineKeyboard.textButton({ text: `‚úÖ –ù–∞–ø—Ä–∞–≤–æ`, payload: { cmd: 'tagator_like', idb: selector.id } })
        ],
        (user_check.donate == true) ?
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } }),
            InlineKeyboard.textButton({ text: '‚Äº‚úè –ù–∞–ø—Ä–∞–≤–æ', payload: { cmd: 'tagator_like_don', idb: selector.id  } })
        ] :
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
        ],
        [
            InlineKeyboard.textButton({ text: '‚Äº‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'tagator_report', idb: selector.id } })
        ]
    ])
    await Send_Message(context, `${text}`, keyboard, /*blank.photo*/)
}

export async function Tagator_Like(context: MessageContext, queryPayload: any) {
    
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_nice = await prisma.blank.findFirst({ where: { id: queryPayload.idb } })
    if (!blank_nice) { return }
    const user_nice = await prisma.account.findFirst({ where: { id: blank_nice.id_account } })
    if (!user_nice) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–º —Å–µ–±—è –∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    const user_self = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_self) { return }
    const blank_self = await prisma.blank.findFirst({ where: { id_account: user_self.id } })
    if (!blank_self) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    const blank_vision_check = await prisma.vision.findFirst({ where: { id_account: context.chat.id, id_blank: queryPayload.idb }})
	if (!blank_vision_check) { const blank_skip = await prisma.vision.create({ data: { id_account: user_self.id, id_blank: queryPayload.idb } }) }
	await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
	const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 }})
	if (!mail_set) { return }
    await Send_Message_NotSelf(Number(user_nice.idvk) , `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) 
	await Logger(`(private chat) ~ clicked swipe for <blank> #${blank_nice.id} by <user> ‚Ññ${context.chat.id}`)
    await Tagator_Research(context)
}

export async function Tagator_Unlike(context: MessageContext, queryPayload: any) {
    // –ø—Ä–æ–≤–µ—Ä—è–º —Å–µ–±—è –∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    const user_self = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_self) { return }
    const blank_self = await prisma.blank.findFirst({ where: { id_account: user_self.id } })
    if (!blank_self) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    const blank_vision_check = await prisma.vision.findFirst({ where: { id_account: context.chat.id, id_blank: queryPayload.idb }})
	if (!blank_vision_check) { const blank_skip = await prisma.vision.create({ data: { id_account: user_self.id, id_blank: queryPayload.idb } }) }
    await Send_Message(context, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${queryPayload.idb}.`)
	await Logger(`(private chat) ~ clicked unswipe for <blank> #${queryPayload.idb} by <user> ‚Ññ${context.senderId}`)
    await Tagator_Research(context)
}

export async function Blank_Report(context: MessageContext, queryPayload: any) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_report = await prisma.blank.findFirst({ where: { id: queryPayload.idb } })
    if (!blank_report) { return }
    const user_report = await prisma.account.findFirst({ where: { id: blank_report.id_account } })
    if (!user_report) { return }
    const keyboard = InlineKeyboard.keyboard([
        [
            InlineKeyboard.textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'blank_report_ION', idb: blank_report.id } })
        ],
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'tagator_research' } })
        ]
    ])
    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∂–∞–ª–æ–±—ã
	await Logger(`(private chat) ~ starting report writing on <blank> #${blank_report.id} by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∂–∞–ª–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Tagator_Report_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    const report_check = await prisma.report.findFirst({ where: { id_blank:  queryPayload.idb, id_account: user_check.id }})
    if (report_check) { return await Send_Message(context, `–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É ${report_check.id_blank}`)}
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_report_prefab_input_off'
	users_pk[id].id_target = queryPayload.idb
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –æ—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤:`, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Tagator_Like_Donation_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_like_donation_prefab_input_off'
	users_pk[id].id_target = queryPayload.idb
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç 10 –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤:`, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Tagator_Research_Config_Like(context: MessageContext, queryPayload: any) {
    //console.log(context)
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    if (user_check.tag_like == null) { await prisma.account.update({ where: { id: user_check.id }, data: { tag_like: JSON.stringify([]) } })} 
    let tag = user_check.tag_like != null ? JSON.parse(user_check.tag_like ?? []) : []
    const id_tag = queryPayload.id ? Number(queryPayload.id) : null
    const tag_sel = queryPayload.id && id_tag ? await getTagById(id_tag) : null
    if (tag_sel) { 
        if (tag.includes(id_tag)) {
            tag = tag.filter((selectedId: any) => selectedId !== id_tag);
        } else {
            tag = [...tag, id_tag];
        }
        await prisma.account.update({ where: { id: user_check.id }, data: { tag_like: JSON.stringify(tag) } })
    }
    let tags = ''
    for (const i of tag) {
        console.log(i)
        tags += `${await getTagById(i)} `
    }
    await Send_Message(context, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏ –Ω–∞—Ñ–∏–≥: ${tags}`)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '#—Ñ–∞–Ω–¥–æ–º', payload: { cmd: 'tagator_research_config_like', id: 1 } })
    .textButton({ text: '#–æ—Ä–∏–¥–∂–∏–Ω–∞–ª', payload: { cmd: 'tagator_research_config_like', id: 2 } }).row()

    .textButton({ text: '#–Ω–∞—É—á–Ω–∞—è_—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_like', id: 3 } })
    .textButton({ text: '#—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_like', id: 4 } }).row()
    .textButton({ text: '#—Ñ—ç–Ω—Ç–µ–∑–∏', payload: { cmd: 'tagator_research_config_like', id: 5 } })
    .textButton({ text: '#–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', payload: { cmd: 'tagator_research_config_like', id: 6} })
    .textButton({ text: '#–≤–æ–µ–Ω–Ω–æ–µ', payload: { cmd: 'tagator_research_config_like', id: 7 } }).row()
    .textButton({ text: '#–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ', payload: { cmd: 'tagator_research_config_like', id: 8 } })
    .textButton({ text: '#–¥–µ—Ç–µ–∫—Ç–∏–≤', payload: { cmd: 'tagator_research_config_like', id: 9 } })
    .textButton({ text: '#–∫—Ä–∏–º–∏–Ω–∞–ª', payload: { cmd: 'tagator_research_config_like', id: 10 } }).row()
    .textButton({ text: '#—ç–∫—à–µ–Ω', payload: { cmd: 'tagator_research_config_like', id: 11 } })
    .textButton({ text: '#—É–∂–∞—Å—ã', payload: { cmd: 'tagator_research_config_like', id: 12 } })
    .textButton({ text: '#–¥—Ä–∞–º–∞', payload: { cmd: 'tagator_research_config_like', id: 13 } })
    .textButton({ text: '#–º–∏—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_like', id: 14 } }).row()
    .textButton({ text: '#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', payload: { cmd: 'tagator_research_config_like', id: 15 } })
    .textButton({ text: '#–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', payload: { cmd: 'tagator_research_config_like', id: 16 } }).row()
    .textButton({ text: '#—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_like', id: 17 } })
    .textButton({ text: '#–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–∏–≥—Ä–∞', payload: { cmd: 'tagator_research_config_like', id: 18 } }).row()

    .textButton({ text: '#—Ñ—É—Ä—Ä–∏', payload: { cmd: 'tagator_research_config_like', id: 19 } })
    .textButton({ text: '#–æ–º–µ–≥–∞–≤–µ—Ä—Å', payload: { cmd: 'tagator_research_config_like', id: 20 } }).row()
    .textButton({ text: '#–ø–æ—Å—Ç–µ–ª—å–Ω—ã–µ_—Å—Ü–µ–Ω—ã', payload: { cmd: 'tagator_research_config_like', id: 21 } })
    .textButton({ text: '#–ø–µ—Ä–µ–ø–∏—Ö–æ–Ω', payload: { cmd: 'tagator_research_config_like', id: 22 } }).row()

    .textButton({ text: '#14+', payload: { cmd: 'tagator_research_config_like', id: 23 } })
    .textButton({ text: '#16+', payload: { cmd: 'tagator_research_config_like', id: 24 } })//.row()
    .textButton({ text: '#18+', payload: { cmd: 'tagator_research_config_like', id: 25 } })
    .textButton({ text: '#18++', payload: { cmd: 'tagator_research_config_like', id: 26 } }).row()

    .textButton({ text: '#–º—Å–∫/–º—Å–∫-1', payload: { cmd: 'tagator_research_config_like', id: 27 } })
    .textButton({ text: '#–º—Å–∫+1/2/3', payload: { cmd: 'tagator_research_config_like', id: 28 } }).row()
    .textButton({ text: '#–º—Å–∫+4/5/6', payload: { cmd: 'tagator_research_config_like', id: 29 } })
    .textButton({ text: '#–º—Å–∫+7/8/9', payload: { cmd: 'tagator_research_config_like', id: 30 } }).row()

    .textButton({ text: '#–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_like', id: 31 } })
    .textButton({ text: '#—Å—Ä–µ–¥–Ω–µ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_like', id: 32 } }).row()
    .textButton({ text: '#–º–∞–ª–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_like', id: 33 } })
    .textButton({ text: '#—Ä–∞–∑–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_like', id: 34 } }).row()

    .textButton({ text: '#—Ä–µ–∞–ª', payload: { cmd: 'tagator_research_config_like', id: 35 } })
    .textButton({ text: '#–≤–Ω–µ—Ä–æ–ª–µ–≤–æ–µ_–æ–±—â–µ–Ω–∏–µ', payload: { cmd: 'tagator_research_config_like', id: 36 } }).row()
    .textButton({ text: '#–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π_—Å—Ç–∏–ª—å', payload: { cmd: 'tagator_research_config_like', id: 37 } })
    .textButton({ text: '#–ø–æ–ª—É—Ä–æ–ª', payload: { cmd: 'tagator_research_config_like', id: 38 } }).row()

    .textButton({ text: '#–¥–∂–µ–Ω', payload: { cmd: 'tagator_research_config_like', id: 39 } })
    .textButton({ text: '#–≥–µ—Ç', payload: { cmd: 'tagator_research_config_like', id: 40 } })//.row()
    .textButton({ text: '#—Å–ª—ç—à', payload: { cmd: 'tagator_research_config_like', id: 41 } })
    .textButton({ text: '#—Ñ–µ–º—Å–ª—ç—à', payload: { cmd: 'tagator_research_config_like', id: 42 } }).row()

    .textButton({ text: '#–∞–∫—Ç–∏–≤', payload: { cmd: 'tagator_research_config_like', id: 43 } })
    .textButton({ text: '#–ø–∞—Å—Å–∏–≤', payload: { cmd: 'tagator_research_config_like', id: 44 } })
    .textButton({ text: '#—É–Ω–∏–≤–µ—Ä—Å–∞–ª', payload: { cmd: 'tagator_research_config_like', id: 45 } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'tagator_menu' } }).row()
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–µ–≥–∞—Ç–æ—Ä-2043`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}

export async function Tagator_Research_Config_Unlike(context: MessageContext, queryPayload: any) {
    //console.log(context)
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
	const banned_me = await User_Banned(context)
	if (banned_me) { return await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`) }
	await Online_Set(context)
	const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
    if (!blank_check) { return }
    if (blank_check.banned) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    if (user_check.tag_unlike == null) { await prisma.account.update({ where: { id: user_check.id }, data: { tag_unlike: JSON.stringify([]) } })} 
    let tag = user_check.tag_unlike != null ? JSON.parse(user_check.tag_unlike ?? []) : []
    const id_tag = queryPayload.id ? Number(queryPayload.id) : null
    const tag_sel = queryPayload.id && id_tag ? await getTagById(id_tag) : null
    if (tag_sel) { 
        if (tag.includes(id_tag)) {
            tag = tag.filter((selectedId: any) => selectedId !== id_tag);
        } else {
            tag = [...tag, id_tag];
        }
        await prisma.account.update({ where: { id: user_check.id }, data: { tag_unlike: JSON.stringify(tag) } })
    }
    let tags = ''
    for (const i of tag) {
        console.log(i)
        tags += `${await getTagById(i)} `
    }
    await Send_Message(context, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏ –Ω–∞—Ñ–∏–≥: ${tags}`)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '#—Ñ–∞–Ω–¥–æ–º', payload: { cmd: 'tagator_research_config_unlike', id: 1 } })
    .textButton({ text: '#–æ—Ä–∏–¥–∂–∏–Ω–∞–ª', payload: { cmd: 'tagator_research_config_unlike', id: 2 } }).row()

    .textButton({ text: '#–Ω–∞—É—á–Ω–∞—è_—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_unlike', id: 3 } })
    .textButton({ text: '#—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_unlike', id: 4 } }).row()
    .textButton({ text: '#—Ñ—ç–Ω—Ç–µ–∑–∏', payload: { cmd: 'tagator_research_config_unlike', id: 5 } })
    .textButton({ text: '#–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', payload: { cmd: 'tagator_research_config_unlike', id: 6} })
    .textButton({ text: '#–≤–æ–µ–Ω–Ω–æ–µ', payload: { cmd: 'tagator_research_config_unlike', id: 7 } }).row()
    .textButton({ text: '#–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ', payload: { cmd: 'tagator_research_config_unlike', id: 8 } })
    .textButton({ text: '#–¥–µ—Ç–µ–∫—Ç–∏–≤', payload: { cmd: 'tagator_research_config_unlike', id: 9 } })
    .textButton({ text: '#–∫—Ä–∏–º–∏–Ω–∞–ª', payload: { cmd: 'tagator_research_config_unlike', id: 10 } }).row()
    .textButton({ text: '#—ç–∫—à–µ–Ω', payload: { cmd: 'tagator_research_config_unlike', id: 11 } })
    .textButton({ text: '#—É–∂–∞—Å—ã', payload: { cmd: 'tagator_research_config_unlike', id: 12 } })
    .textButton({ text: '#–¥—Ä–∞–º–∞', payload: { cmd: 'tagator_research_config_unlike', id: 13 } })
    .textButton({ text: '#–º–∏—Å—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_unlike', id: 14 } }).row()
    .textButton({ text: '#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', payload: { cmd: 'tagator_research_config_unlike', id: 15 } })
    .textButton({ text: '#–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', payload: { cmd: 'tagator_research_config_unlike', id: 16 } }).row()
    .textButton({ text: '#—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', payload: { cmd: 'tagator_research_config_unlike', id: 17 } })
    .textButton({ text: '#–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–∏–≥—Ä–∞', payload: { cmd: 'tagator_research_config_unlike', id: 18 } }).row()

    .textButton({ text: '#—Ñ—É—Ä—Ä–∏', payload: { cmd: 'tagator_research_config_unlike', id: 19 } })
    .textButton({ text: '#–æ–º–µ–≥–∞–≤–µ—Ä—Å', payload: { cmd: 'tagator_research_config_unlike', id: 20 } }).row()
    .textButton({ text: '#–ø–æ—Å—Ç–µ–ª—å–Ω—ã–µ_—Å—Ü–µ–Ω—ã', payload: { cmd: 'tagator_research_config_unlike', id: 21 } })
    .textButton({ text: '#–ø–µ—Ä–µ–ø–∏—Ö–æ–Ω', payload: { cmd: 'tagator_research_config_unlike', id: 22 } }).row()

    .textButton({ text: '#14+', payload: { cmd: 'tagator_research_config_unlike', id: 23 } })
    .textButton({ text: '#16+', payload: { cmd: 'tagator_research_config_unlike', id: 24 } })//.row()
    .textButton({ text: '#18+', payload: { cmd: 'tagator_research_config_unlike', id: 25 } })
    .textButton({ text: '#18++', payload: { cmd: 'tagator_research_config_unlike', id: 26 } }).row()

    .textButton({ text: '#–º—Å–∫/–º—Å–∫-1', payload: { cmd: 'tagator_research_config_unlike', id: 27 } })
    .textButton({ text: '#–º—Å–∫+1/2/3', payload: { cmd: 'tagator_research_config_unlike', id: 28 } }).row()
    .textButton({ text: '#–º—Å–∫+4/5/6', payload: { cmd: 'tagator_research_config_unlike', id: 29 } })
    .textButton({ text: '#–º—Å–∫+7/8/9', payload: { cmd: 'tagator_research_config_unlike', id: 30 } }).row()

    .textButton({ text: '#–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_unlike', id: 31 } })
    .textButton({ text: '#—Å—Ä–µ–¥–Ω–µ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_unlike', id: 32 } }).row()
    .textButton({ text: '#–º–∞–ª–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_unlike', id: 33 } })
    .textButton({ text: '#—Ä–∞–∑–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫', payload: { cmd: 'tagator_research_config_unlike', id: 34 } }).row()

    .textButton({ text: '#—Ä–µ–∞–ª', payload: { cmd: 'tagator_research_config_unlike', id: 35 } })
    .textButton({ text: '#–≤–Ω–µ—Ä–æ–ª–µ–≤–æ–µ_–æ–±—â–µ–Ω–∏–µ', payload: { cmd: 'tagator_research_config_unlike', id: 36 } }).row()
    .textButton({ text: '#–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π_—Å—Ç–∏–ª—å', payload: { cmd: 'tagator_research_config_unlike', id: 37 } })
    .textButton({ text: '#–ø–æ–ª—É—Ä–æ–ª', payload: { cmd: 'tagator_research_config_unlike', id: 38 } }).row()

    .textButton({ text: '#–¥–∂–µ–Ω', payload: { cmd: 'tagator_research_config_unlike', id: 39 } })
    .textButton({ text: '#–≥–µ—Ç', payload: { cmd: 'tagator_research_config_unlike', id: 40 } })//.row()
    .textButton({ text: '#—Å–ª—ç—à', payload: { cmd: 'tagator_research_config_unlike', id: 41 } })
    .textButton({ text: '#—Ñ–µ–º—Å–ª—ç—à', payload: { cmd: 'tagator_research_config_unlike', id: 42 } }).row()

    .textButton({ text: '#–∞–∫—Ç–∏–≤', payload: { cmd: 'tagator_research_config_unlike', id: 43 } })
    .textButton({ text: '#–ø–∞—Å—Å–∏–≤', payload: { cmd: 'tagator_research_config_unlike', id: 44 } })
    .textButton({ text: '#—É–Ω–∏–≤–µ—Ä—Å–∞–ª', payload: { cmd: 'tagator_research_config_unlike', id: 45 } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'tagator_menu' } }).row()
	await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.chat.id}`)
    await Send_Message(context, `üìé –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–µ–≥–∞—Ç–æ—Ä-2086`, keyboard, /*blank.photo*/)
    await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.chat.id}`)
}