import { InlineKeyboard, InlineKeyboardBuilder, MessageContext } from "puregram";
import prisma from "../prisma";
import { Accessed, Blank_Vision_Activity, Logger, Online_Set, Send_Message, Send_Message_NotSelf, User_Banned, Verify_Blank_Not_Self, Verify_User } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { Blank } from "@prisma/client";
import { keyboard_back } from "../datacenter/tag";

export async function Random_Research(context: MessageContext) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    //const blank_check = user_verify.blank_check
    // –ø–æ–¥–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∫–µ—Ç—É
    let blank_build = null
    for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
        if (blank.id_account == user_check.id) { continue }
        const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
        if (vision_check) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
        const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: Number(user_bl_ch?.idvk) ?? 0 } })
        if (black_list_my) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: Number(user_check.idvk) } })
        if (black_list_other) { continue }
        blank_build = blank
        break
    }
    if (!blank_build) { return await Send_Message(context, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å üé≤ —Ä–∞–Ω–¥–æ–º –ø–æ–∑–∂–µ.`, keyboard_back) }
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    const selector: Blank = blank_build
    const blank_check_notself = await prisma.blank.findFirst({ where: { id: selector.id } })
    if (!blank_check_notself) { return await Send_Message(context, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `, keyboard_back) }
    let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
    const text = `üõ∞Ô∏è –ü–æ–∏—Å–∫–æ–≤–æ–π —Ä–µ–∂–∏–º ¬´–†–∞–Ω–¥–æ–º-2000¬ª:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '‚õî –ù–∞–ª–µ–≤–æ', payload: { cmd: 'blank_unlike', idb: selector.id } })
    .textButton({ text: `‚úÖ –ù–∞–ø—Ä–∞–≤–æ`, payload: { cmd: 'blank_like', idb: selector.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    if (user_check.donate == true) { 
        keyboard.textButton({ text: '‚úè –ù–∞–ø—Ä–∞–≤–æ', payload: { cmd: 'blank_like_don', idb: selector.id  } }).row() 
    } else { 
        keyboard.row() 
    }
    keyboard.textButton({ text: '‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'blank_report', idb: selector.id } })
    await Send_Message(context, `${text}`, keyboard, /*blank.photo*/)
    await Logger(`(research random) ~ show <blank> #${selector.id} for @${user_check.username}`)
}

export async function Blank_Like(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    const blank_self = user_verify.blank_check
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_verify = await Verify_Blank_Not_Self(context, queryPayload.idb)
    if (!blank_verify) { return }
    const user_nice = blank_verify.user_nice
    const blank_nice = blank_verify.blank_nice
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, queryPayload.idb, user_self)
	await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
	const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 }})
	if (!mail_set) { return }
    await Send_Message_NotSelf(Number(user_nice.idvk) , `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) 
	await Logger(`(research random) ~ clicked swipe <blank> #${blank_nice.id} for @${user_self.username}`)
    await Random_Research(context)
}

export async function Blank_Unlike(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, queryPayload.idb, user_self)
    await Send_Message(context, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${queryPayload.idb}.`)
	await Logger(`(research random) ~ clicked unswipe for <blank> #${queryPayload.idb} for @${user_self.username}`)
    await Random_Research(context)
}

export async function Blank_Report(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
    const blank_verify = await Verify_Blank_Not_Self(context, queryPayload.idb)
    if (!blank_verify) { return }
    //const user_report = blank_verify.user_nice
    const blank_report = blank_verify.blank_nice
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'blank_report_ION', idb: blank_report.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'random_research' } })
    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∂–∞–ª–æ–±—ã
    await Send_Message(context, `üìé –ü–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –∂–∞–ª–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É [‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É]`, keyboard)
    await Logger(`(research random) ~ show prefab for report on <blank> #${blank_report.id} by @${user_self.username}`)
}

export async function Blank_Report_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∂–∞–ª–æ–±—ã
    const report_check = await prisma.report.findFirst({ where: { id_blank:  queryPayload.idb, id_account: user_self.id }})
    if (report_check) { return await Send_Message(context, `‚ö† –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É ${report_check.id_blank}`)}
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∂–∞–ª–æ–±—å—ã –Ω–∞ –∞–Ω–∫–µ—Ç—É
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_report_prefab_input_off'
	users_pk[id].id_target = queryPayload.idb
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –æ—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(research random) ~ starting write report on <blank> #${queryPayload.idb} by @${user_self.username}`)
}

export async function Blank_Like_Donation_Perfab_Input_ON(context: MessageContext, queryPayload: any) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    users_pk[id].mode = 'input'
    users_pk[id].operation = 'blank_like_donation_prefab_input_off'
	users_pk[id].id_target = queryPayload.idb
    await Send_Message(context, `üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç 10 –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤:`)
    await Logger(`(research random) ~ starting write message for donation like on <blank> #${queryPayload.idb} by @${user_self.username}`)
}