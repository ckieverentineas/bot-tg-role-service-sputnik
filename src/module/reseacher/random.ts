import { InlineKeyboard, MessageContext } from "puregram";
import prisma from "../prisma";
import { Accessed, Logger, Send_Message, Send_Message_NotSelf, User_Banned } from "../helper";
import { Censored_Activation_Pro } from "../other/censored";
import { telegram, users_pk } from "../..";
import { User_Pk_Get, User_Pk_Init } from "../other/pk_metr";
import { Blank } from "@prisma/client";

export async function Random_Research(context: MessageContext) {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
    const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    if (!blank_check) { return await Send_Message(context, `‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
    const banned_me = await User_Banned(context)
    if (banned_me) { return await Send_Message(context, `üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`) }
    //await Online_Set(context)
    let blank_build = null
    for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
        if (blank.id_account == user_check.id) { continue }
        const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
        if (vision_check) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
        const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: user_bl_ch?.idvk ?? 0 } })
        if (black_list_my) { continue }
        // –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: user_check.idvk } })
        if (black_list_other) { continue }
        blank_build = blank
        break
    }
    await Logger(`(private chat) ~ starting check random blank by <user> ‚Ññ${context.senderId}`)
    if (!blank_build) { return await Send_Message(context, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å üé≤ —Ä–∞–Ω–¥–æ–º –ø–æ–∑–∂–µ.`) }
    const selector: Blank = blank_build
    const blank_check_notself = await prisma.blank.findFirst({ where: { id: selector.id } })
    if (!blank_check_notself) { return await Send_Message(context, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `) }
    let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
    const text = `üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const keyboard = InlineKeyboard.keyboard([
        [ 
            InlineKeyboard.textButton({ text: 'üõ†‚õî –ù–∞–ª–µ–≤–æ', payload: { command: 'blank_unlike', idb: selector.id, idbs: blank_check.id, ida: selector.id_account } }),
            InlineKeyboard.textButton({ text: `üõ†‚úÖ –ù–∞–ø—Ä–∞–≤–æ`, payload: { command: 'blank_like', idb: selector.id, idbs: blank_check.id, ida: selector.id_account } })
        ],
        (await Accessed(context) != `user`) ?
        [
            InlineKeyboard.textButton({ text: 'üõ†üö´ –ù–∞–∑–∞–¥', payload: { command: 'main_menu' } }),
            InlineKeyboard.textButton({ text: 'üõ†‚úè –ù–∞–ø—Ä–∞–≤–æ', payload: { command: 'blank_like_donation' } })
        ] :
        [
            InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { command: 'main_menu' } })
        ],
        [
            InlineKeyboard.textButton({ text: 'üõ†‚ö† –ñ–∞–ª–æ–±–∞', payload: { command: 'blank_report', idb: selector.id, idbs: blank_check.id, ida: selector.id_account } })
        ]
    ])
    await Send_Message(context, `${text}`, keyboard, /*blank.photo*/)
}

export async function Blank_Like(context: MessageContext, queryPayload: any) {
    const blank_vision_check = await prisma.vision.findFirst({ where: { id_account: context.chat.id, id_blank: queryPayload.idb }})
	//if (!blank_vision_check) { const blank_skip = await prisma.vision.create({ data: { id_account: context.chat.id, id_blank: queryPayload.id_blank } }) }
    const user_nice = await prisma.account.findFirst({ where: { id: queryPayload.ida } })
    if (!user_nice) { return }
    const blank_nice = await prisma.blank.findFirst({ where: { id: queryPayload.idb } })
    if (!blank_nice) { return }
	await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
	//const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: queryPayload.id_blank_self ?? 0 }})
	//if (mail_set) { await Send_Message(user_nice?.idvk ?? user_check.idvk, `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) }
    await Send_Message_NotSelf(user_nice.idvk, `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`)
	await Logger(`(private chat) ~ clicked swipe for <blank> #${blank_nice.id} by <user> ‚Ññ${context.chat.id}`)
}