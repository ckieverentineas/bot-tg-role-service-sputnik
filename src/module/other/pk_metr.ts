import { InlineKeyboard, Keyboard } from "puregram";
import { users_pk } from "../..";
import { Send_Message } from "../helper";

//const caller = '[club224622524|@bscorplabinc]'
  const caller = '[club226323522|@sputnikbot]'
export async function Counter_PK_Module(context: any) {
    await User_Pk_Init(context)
    const id = await User_Pk_Get(context)
    
    if (id == null) { return }
    if (context.text == `!–ø–∫–º–µ—Ç—Ä` || context.text == `/pkmetr`) { users_pk[id].mode = 'pkmetr'; await Send_Message(context, `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö. –í–≤–æ–¥–∏—Ç–µ —Ä–ø –ø–æ—Å—Ç—ã, –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω—ã, –∫–∞–∫–∞—è –Ω—É–∂–Ω–∞ –≤–∞–º! –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ !–∫–æ–Ω—á–∏—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ !–æ–±–Ω—É–ª–∏—Ç—å`); return true }
	if (context.text == `!–æ–±–Ω—É–ª–∏—Ç—å` || context.text == `${caller} !–æ–±–Ω—É–ª–∏—Ç—å`) { users_pk[id].text = ``; Send_Message(context, `üóëÔ∏è –û–±–Ω—É–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ—Ä–∞ –ü–ö`); return true }
    if (context.text == `!–∫–æ–Ω—á–∏—Ç—å` || context.text == `${caller} !–∫–æ–Ω—á–∏—Ç—å`) { 
        users_pk[id].mode = 'main'; users_pk[id].text = ``; 
        const keyboard = Keyboard.keyboard([
            [ 
              InlineKeyboard.textButton({ text: '!—Å–ø—É—Ç–Ω–∏–∫', payload: 'archive_self' }),
              InlineKeyboard.textButton({ text: `!–ø–∫–º–µ—Ç—Ä`, payload: 'sniper_self' })
            ]
        ]).resize()
        await Send_Message(context, `‚õî –û–±–Ω—É–ª–µ–Ω –∏ –≤—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö`, keyboard); 
        return true 
    }
	if (context.text && typeof context.text == `string` && users_pk[id].mode == 'pkmetr') {
		users_pk[id].text += context.text
        const keyboard = Keyboard.keyboard([
            [ 
              InlineKeyboard.textButton({ text: '!–æ–±–Ω—É–ª–∏—Ç—å', payload: 'archive_self' }),
              InlineKeyboard.textButton({ text: `!–∫–æ–Ω—á–∏—Ç—å`, payload: 'sniper_self' })
            ]
        ]).resize()
		//const lines = users.text.split(/...|..|.|!|\\?|!\\?|\\?!|;/).length; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤–æ–æ–±—â–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–∞–¥–æ, –∫–∞–∫ –Ω–∞–¥–æ?
		const sentences = users_pk[id].text.match(/[^.!?]+[.!?]+/g);
		const lines = sentences ? sentences.length : 0;
		await Send_Message(context, `üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è [${sentences ? sentences[0] : ''} <--...--> ${sentences && sentences.length > 1 ? sentences[sentences.length-1] : ''}]:
            \n‚ú® –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìï C–∏–º–≤–æ–ª–æ–≤: ${users_pk[id].text.length}\nüìô C–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${await countWords(users_pk[id].text)}\nüìó C–ª–æ–≤: ${await countWords2(users_pk[id].text)}\n‚úè –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${lines}
            \n‚ú® –≠—Ç–∞–ª–æ–Ω –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º:\nüíª –ü–ö: ${(users_pk[id].text.length/60).toFixed(2)}\nüì± –ú–ë: ${(users_pk[id].text.length/34).toFixed(2)}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${(users_pk[id].text.length/4096*100).toFixed(2)}%
            \n‚ú® –≠—Ç–∞–ª–æ–Ω –¥–ª—è –í–∫–æ–Ω—Ç–∞–∫—Ç–µ:\nüíª –ü–ö: ${(users_pk[id].text.length/102).toFixed(2)}\nüì± –ú–ë: ${(users_pk[id].text.length/35).toFixed(2)}\nüì∞ –ü–æ—Å—Ç: ${(users_pk[id].text.length/16384*100).toFixed(2)}%\nüìß –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${(users_pk[id].text.length/280*100).toFixed(2)}%\nüí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ: ${(users_pk[id].text.length/4096*100).toFixed(2)}%`, keyboard)
	} else {
        return false
    }
    return true
	//console.log(users_pk[id].text)
	
}

async function countWords(str: string) {
    //—ç—Ç–æ—Ç –∫–æ–¥ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤, –∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∞ –Ω–∞–º –Ω–∞–¥–æ —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    return str.replace(/\s/g, '').length;
    //str = str.replace(/(?!\W)\S+/g,"1").replace(/\s*/g,"");
    //return str.lastIndexOf("");
}
async function countWords2(passedString: string){
    //—ç—Ç–æ—Ç –∫–æ–¥ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–æ –∏–º–µ–µ—Ç –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ —É—Ä–æ–≤–Ω—è –≤–æ—Ä–¥–∞
    passedString = passedString.replace(/(^\s*)|(\s*$)/gi, '');
    passedString = passedString.replace(/\s\s+/g, ' '); 
    passedString = passedString.replace(/,/g, ' ');  
    passedString = passedString.replace(/;/g, ' ');
    passedString = passedString.replace(/\//g, ' ');  
    passedString = passedString.replace(/\\/g, ' ');  
    passedString = passedString.replace(/{/g, ' ');
    passedString = passedString.replace(/}/g, ' ');
    passedString = passedString.replace(/\n/g, ' ');  
    passedString = passedString.replace(/\./g, ' '); 
    passedString = passedString.replace(/[\{\}]/g, ' ');
    passedString = passedString.replace(/[\(\)]/g, ' ');
    passedString = passedString.replace(/[[\]]/g, ' ');
    passedString = passedString.replace(/[ ]{2,}/gi, ' ');
    const countWordsBySpaces = passedString.trim().split(/\s+/);
    //var countWordsBySpaces = passedString.split(' ').length; 
    return countWordsBySpaces.length;
}

export async function User_Pk_Init(context: any) {
    let find_me = false
    for (let i = 0; i < users_pk.length; i++) {
        if (users_pk[i].idvk == context.chat.id && !find_me) {
            find_me = true
        }
    }
    if (!find_me) { users_pk.push({ idvk: context.chat.id, text: ``, mode: 'main', operation: '', id_target: null } )}
}

export async function User_Pk_Get(context: any) {
    let find_me = null
    for (let i = 0; i < users_pk.length; i++) {
        if (users_pk[i].idvk == context.chat.id) {
            find_me = i
        }
    }
    //console.log(find_me)
    return find_me
}