import { InlineKeyboard, InlineKeyboardBuilder } from "puregram";
import { chat_id_moderate, users_pk } from "../..";
import { Accessed, Blank_Cleaner, Blank_Vision_Activity, Logger, Online_Set, Send_Message, Send_Message_NotSelf, User_Banned, Username_Verify, Verify_Blank_Not_Self, Verify_User, Format_Text_With_Tags } from "../helper";
import prisma from "../prisma";
import { Censored_Activation_Pro } from "./censored";
import { User_Pk_Get, User_Pk_Init } from "./pk_metr";
import { Blank } from "@prisma/client";
import { keyboard_back, getTagsForBlank } from "../datacenter/tag";
import { Browser_Research_Prefab_Input_Off, Browser_Report_Prefab_Input_Off, Browser_Like_Donation_Prefab_Input_Off} from "../reseacher/browser";

export async function Input_Module(context: any) {
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –º–æ–¥—É–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await User_Pk_Init(context)
    // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const id = await User_Pk_Get(context)
    if (id == null) { return }
    //await Send_Message(context, `mode: ${users_pk[id].mode}\n operation: ${users_pk[id].operation}\n input: ${users_pk[id].text}`)
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
	if (context.text && typeof context.text == `string` && users_pk[id].mode == 'input') {
		users_pk[id].text = context.text
        users_pk[id].mode = 'main'
        //await Send_Message(context, `–º–æ–¥: ${users_pk[id].operation}\n —Ç–µ–∫—Å—Ç: ${users_pk[id].text}`)
	} else {
        return false
    }
    const config: Record<string, Function> = {
        "blank_create_prefab_input_off": Blank_Create_Prefab_Input_Off, // 1 –ê–Ω–∫–µ—Ç–∞ - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        'blank_edit_prefab_input_off': Blank_Edit_Prefab_Input_Off, // 1 –ê–Ω–∫–µ—Ç–∞ - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        "blank_report_prefab_input_off": Blank_Report_Prefab_Input_Off, // 2 –†–∞–Ω–¥–æ–º - –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É
        'blank_like_donation_prefab_input_off': Blank_Like_Donation_Prefab_Input_Off, // –†–∞–Ω–¥–æ–º - –ª–∞–π–∫ –¥–æ–Ω–∞—Ç–µ—Ä–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        'sniper_research_prefab_input_off': Sniper_Research_Prefab_Input_Off, // –°–Ω–∞–π–ø–µ—Ä - –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∞–Ω–∫–µ—Ç—ã
        'tagator_report_prefab_input_off': Tagator_Report_Prefab_Input_Off,
        'tagator_like_donation_prefab_input_off': Tagator_Like_Donation_Prefab_Input_Off,
        "browser_research_prefab_input_off": Browser_Research_Prefab_Input_Off,
        "browser_report_prefab_input_off": Browser_Report_Prefab_Input_Off,
        "browser_like_donation_prefab_input_off": Browser_Like_Donation_Prefab_Input_Off
    };
    const command: string | any = users_pk[id].operation;
    if (typeof command != 'string') { return }
    if (config.hasOwnProperty(command)) {
        try {
            await config[command](context, id);
            //await message.editMessageReplyMarkup({ inline_keyboard: [] });
        } catch (e) {
            await Logger(`Error event detected for command '${command}': ${e}`);
        }
    } else {
        await Logger(`Unknown command: '${command}'`);
    }
    return true
	//console.log(users_pk[id].text)
}

async function Blank_Create_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { 
        await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—á–∞—Ç—å.`)
        return false 
    }
    const banned_me = await User_Banned(context)
    if (banned_me) { 
        await Send_Message(context, `üíî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @vasochka_s_konfetami –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞`, keyboard_back) 
        return false
    }
    await Online_Set(context)
    await Username_Verify(context)
    //const blank_check = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'blank_create_prefab_input_on' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã
    if (text_input.length < 30) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat) }
    if (text_input.length > 4000) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç—É –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat) }
    await Send_Message(context, `‚ö† –í –∞–Ω–∫–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${text_input.length} –∏–∑ ${users_pk[id].text.length} –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤.`)
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    const save = await prisma.blank.create({ data: { text: text_input, id_account: user_check.id } })
    const keyboard = new InlineKeyboardBuilder().textButton({ text: 'üß≤ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥–∏', payload: { cmd: 'tagator_blank_config' } })
	await Send_Message(context, `üîß –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç–∫—É-–∫–æ–Ω—Ñ–µ—Ç–∫—É –ø–æ–¥ UID: ${save.id}\n${save.text}`, keyboard)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    await Logger(`(blank config) ~ created <blank> #${save.id} for @${user_check.username}`)
}

async function Blank_Edit_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    const blank_check = user_verify.blank_check
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Å—Ç–µ–º–ø–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    const datenow: any = new Date()
    const dateold: any = new Date(blank_check.crdate)
	const timeouter = 86400000
    if (datenow-dateold > timeouter) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–µ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ`, keyboard_back ) }
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'blank_edit_prefab_input_on' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã
    if (text_input.length < 30) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat) }
    if (text_input.length > 4000) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç—É –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat) }
    await Send_Message(context, `‚ö† –í –∞–Ω–∫–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${text_input.length} –∏–∑ ${users_pk[id].text.length} –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤.`)
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    const blank_edit = await prisma.blank.update({ where: { id: blank_check.id, id_account: user_check.id }, data: { text: text_input } })
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { cmd: 'blank_self' } })
    .textButton({ text: 'üß≤ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥–∏', payload: { cmd: 'tagator_blank_config' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
	await Send_Message(context, `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_edit.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_edit.text}`, keyboard)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    await Logger(`(blank config) ~ edit self <blank> #${blank_edit.id} for @${user_check.username}`)
}

async function Blank_Report_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    //const blank_check = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'blank_report_ION', idb: Number(users_pk[id].id_target) } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'random_research' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    if (!users_pk[id].id_target) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã`, keyboard_back); }
    if (text_input.length < 10) { return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat); }
    if (text_input.length > 2000) { return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat);  }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∂–∞–ª–æ–±—ã
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) { return }
    const user_warn = blank_verify.user_nice
    const blank_report_check = blank_verify.blank_nice
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const report_set = await prisma.report.create({ data: { id_blank:  blank_report_check.id, id_account: user_check.id, text: text_input }})
    const counter_warn = await prisma.report.count({ where: { id_blank: blank_report_check.id, status: 'wait' } })
    await Send_Message_NotSelf(Number(user_warn.idvk), `‚úÖ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.\nüí° –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∂–Ω–æ–µ –æ–±–≤–∏–Ω–µ–Ω–∏–µ, —Ç–æ –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π –∂–∞–ª–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∞—Å.`)
    if (counter_warn >= 3) {
        await prisma.blank.update({ where: { id: blank_report_check.id }, data: { banned: true } })
        await Send_Message_NotSelf(Number(user_warn.idvk), `üö´ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã ${counter_warn}/3. –ò–∑—ã–º–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.`)
        await Send_Message_NotSelf(Number(chat_id_moderate), `‚ö† –ê–Ω–∫–µ—Ç–∞ #${blank_report_check.id} –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–±, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã!`)
    }
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, blank_report_check.id, user_check)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { cmd: 'random_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `‚úÖ –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–æ—Å!`, keyboard)
    await Send_Message_NotSelf(Number(chat_id_moderate), `üß® –ù–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.`)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(random researcher) ~ report on <blank> #${blank_report_check.id} by @${user_check.username}`)
}

async function Tagator_Report_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_check = user_verify.user_check
    //const blank_check = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –í–≤–µ—Å—Ç–∏ –∂–∞–ª–æ–±—É', payload: { cmd: 'tagator_report_ION', idb: Number(users_pk[id].id_target) } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'tagator_research' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    if (!users_pk[id].id_target) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã`, keyboard_back); }
    if (text_input.length < 10) { return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat); }
    if (text_input.length > 2000) { return await Send_Message(context, `‚ö† –ñ–∞–ª–æ–±—É –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat);  }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∂–∞–ª–æ–±—ã
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) { return }
    const user_warn = blank_verify.user_nice
    const blank_report_check = blank_verify.blank_nice
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const report_set = await prisma.report.create({ data: { id_blank:  blank_report_check.id, id_account: user_check.id, text: text_input }})
    const counter_warn = await prisma.report.count({ where: { id_blank: blank_report_check.id, status: 'wait' } })
    await Send_Message_NotSelf(Number(user_warn.idvk), `‚úÖ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.\nüí° –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∂–Ω–æ–µ –æ–±–≤–∏–Ω–µ–Ω–∏–µ, —Ç–æ –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π –∂–∞–ª–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∞—Å.`)
    if (counter_warn >= 3) {
        await prisma.blank.update({ where: { id: blank_report_check.id }, data: { banned: true } })
        await Send_Message_NotSelf(Number(user_warn.idvk), `üö´ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã ${counter_warn}/3. –ò–∑—ã–º–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.`)
        await Send_Message_NotSelf(Number(chat_id_moderate), `‚ö† –ê–Ω–∫–µ—Ç–∞ #${blank_report_check.id} –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–±, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã!`)
    }
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, blank_report_check.id, user_check)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üåê –¢–µ–≥–∞—Ç–æ—Ä', payload: { cmd: 'tagator_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `‚úÖ –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–æ—Å!`, keyboard)
    await Send_Message_NotSelf(Number(chat_id_moderate), `üß® –ù–∞ –∞–Ω–∫–µ—Ç—É #${blank_report_check.id} –∫—Ç–æ-—Ç–æ –¥–æ–Ω–µ—Å –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]!\n‚ö† –ñ–∞–ª–æ–±: ${counter_warn}/3.`)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(tagator researcher) ~ report on <blank> #${blank_report_check.id} by @${user_check.username}`)
}

async function Blank_Like_Donation_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    const blank_self = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –ü–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'blank_like_don', idb: Number(users_pk[id].id_target) } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'random_research' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    if (!users_pk[id].id_target) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –ª–∞–π–∫–∞`, keyboard_back); }
    if (text_input.length < 10) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat); }
    if (text_input.length > 3000) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat);  }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∂–∞–ª–æ–±—ã
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) { return }
    const user_nice = blank_verify.user_nice
    const blank_nice = blank_verify.blank_nice
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, blank_nice.id, user_self)
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—á—Ç—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 }})
    await Send_Message_NotSelf(Number(user_nice.idvk) , `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) 
    await Send_Message_NotSelf(Number(user_nice.idvk) , `‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${blank_self.id}: ${text_input}\n‚ö† –ß—Ç–æ–±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É #${blank_self.id}.`)
	await Send_Message_NotSelf(Number(chat_id_moderate), `‚öñÔ∏è #${blank_self.id} --> ${text_input} --> #${blank_nice.id}`)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { cmd: 'random_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º: ${text_input}`, keyboard)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(random researcher) ~ swipe like with message for <blank> #${blank_nice.id} by @${user_self.username}`)
}

async function Tagator_Like_Donation_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    const blank_self = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: '‚úè –ü–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ', payload: { cmd: 'tagator_like_don', idb: Number(users_pk[id].id_target) } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'tagator_research' } })
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    if (!users_pk[id].id_target) { return await Send_Message(context, `‚ö† –ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –ª–∞–π–∫–∞`, keyboard_back); }
    if (text_input.length < 10) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat); }
    if (text_input.length > 3000) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat);  }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∂–∞–ª–æ–±—ã
    const blank_verify = await Verify_Blank_Not_Self(context, Number(users_pk[id].id_target))
    if (!blank_verify) { return }
    const user_nice = blank_verify.user_nice
    const blank_nice = blank_verify.blank_nice
    // –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
    await Blank_Vision_Activity(context, blank_nice.id, user_self)
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—á—Ç—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const mail_set = await prisma.mail.create({ data: { blank_to: blank_nice.id ?? 0, blank_from: blank_self.id ?? 0 }})
    await Send_Message_NotSelf(Number(user_nice.idvk) , `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_nice.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) 
    await Send_Message_NotSelf(Number(user_nice.idvk) , `‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${blank_self.id}: ${text_input}\n‚ö† –ß—Ç–æ–±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É #${blank_self.id}.`)
	await Send_Message_NotSelf(Number(chat_id_moderate), `‚öñÔ∏è #${blank_self.id} --> ${text_input} --> #${blank_nice.id}`)
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üåê –¢–µ–≥–∞—Ç–æ—Ä', payload: { cmd: 'tagator_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    await Send_Message(context, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${blank_nice.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º: ${text_input}`, keyboard)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(tagator researcher) ~ swipe like with message for <blank> #${blank_nice.id} by @${user_self.username}`)
}

async function Sniper_Research_Prefab_Input_Off(context: any, id: number) {
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user_verify = await Verify_User(context)
    if (!user_verify) { return }
    const user_self = user_verify.user_check
    //const blank_self = user_verify.blank_check
    // —á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let text_input = await Blank_Cleaner(users_pk[id].text)
    // –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä–∞ –∞–Ω–∫–µ—Ç—ã
    const keyboard_repeat = new InlineKeyboardBuilder()
    .textButton({ text: `üéØ –°–Ω–∞–π–ø–µ—Ä`, payload: { cmd: 'sniper_research' } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
    if (text_input.length < 1) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 1 —Å–∏–º–≤–æ–ª–∞ –Ω–∞–¥–æ!`, keyboard_repeat); }
    if (text_input.length > 3000) { return await Send_Message(context, `‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`, keyboard_repeat);  }
    if (typeof Number(text_input) != "number") { return Send_Message(context, `‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!`, keyboard_repeat);}
    const inputer = Math.floor(Number(text_input))
    if (inputer < 0) { return await Send_Message(context, `‚ö† –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!`, keyboard_repeat); }
    if (Number.isNaN(inputer)) { return await Send_Message(context, `‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`, keyboard_repeat); }
    //if (!users_pk[id].id_target) { return }
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å–Ω–∞–π–ø–µ—Ä–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    const blank_sniper_check = await prisma.blank.findFirst({ where: { id: inputer, banned: false } })
    if (!blank_sniper_check) { return await Send_Message(context, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, –∞–Ω–∫–µ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!`, keyboard_back);}
    const selector: Blank = blank_sniper_check
    const blank_check_notself = await prisma.blank.findFirst({ where: { id: selector.id } })
    if (!blank_check_notself) { return await Send_Message(context, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `, keyboard_back) }
    let censored = user_self.censored ? await Censored_Activation_Pro(selector.text) : selector.text
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏
    const baseText = `üõ∞Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π —Ä–µ–∂–∏–º ¬´–°–Ω–∞–π–ø–µ—Ä-0000¬ª:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
    const tags = await getTagsForBlank(selector.id)
    const { text, keyboard } = await Format_Text_With_Tags(context, baseText, selector.id, tags)
    
    keyboard.textButton({ text: '‚õî –ú–∏–º–æ', payload: { cmd: 'blank_unlike', idb: selector.id } })
    .textButton({ text: `‚úÖ –û—Ç–∫–ª–∏–∫`, payload: { cmd: 'blank_like', idb: selector.id } }).row()
    .textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'sniper_research' } })
    
    if (user_self.donate == true) {
        keyboard.textButton({ text: '‚úè –ü–∏—Å—å–º–æ', payload: { cmd: 'blank_like_don', idb: selector.id  } })
    } else {
        keyboard.row()
    }
    
    keyboard.textButton({ text: '‚ö† –ñ–∞–ª–æ–±–∞', payload: { cmd: 'blank_report', idb: selector.id } })
    
    await Send_Message(context, `${text}`, keyboard)
    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_pk[id].operation = ''
    users_pk[id].text = ''
    users_pk[id].id_target = null
    await Logger(`(sniper researcher) ~ show <blank> #${blank_check_notself.id} for @${user_self.username}`)
}