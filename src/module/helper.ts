import { MessageContext } from "puregram";
import { chat_id_system, starting_date, telegram } from "..";
import { Account } from "@prisma/client";
import prisma from "./prisma";

export async function Logger(text: String) {
    const project_name = `Sputnik TG`
    /*const options = {
        era: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long',
        timeZone: 'UTC',
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
    };*/
    console.log(`[${project_name}] --> ${text} <-- (${new Date().toLocaleString("ru"/*, options*/)})`)
}

export async function Send_Message(message: MessageContext, text: string, keyboard?: any) {
    text = text ? text : 'invalid message'
    try {
        if (!keyboard) { await telegram.api.sendMessage({ chat_id: message.chat.id, text: `${text}` }); }
        else { await telegram.api.sendMessage({ chat_id: message.chat.id, text: `${text}`, reply_markup: keyboard }); }
    } catch (e) {
        console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`)
    }
}

export async function Send_Message_NotSelf(id_target: number, text: string, keyboard?: any) {
    text = text ? text : 'invalid message'
    try {
        if (!keyboard) { await telegram.api.sendMessage({ chat_id: id_target, text: `${text}` }); }
        else { await telegram.api.sendMessage({ chat_id: id_target, text: `${text}`, reply_markup: keyboard }); }
    } catch (e) {
        console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`)
    }
}

export async function Accessed(context: any) {
    const user: Account | null | undefined = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user) { return }
    const config: any = {
        "1": `user`,
        "2": `admin`,
        "3": `root`
    }
    const role = config[user.id_role.toString()]
    return role
}

export async function User_Banned(context: any) {
    const user = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user) { return false }
    if (user.banned) { return true }
    return false
}

export async function Blank_Cleaner(text: string) {
	try {
		return text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å \-+‚Äî‚Äì_‚Ä¢()/\\"'`¬´¬ª{}[#‚Ññ\]=:;.,!?...\n\r]/gi, '')
	} catch {
		return ' '
	}
}

export function Sleep(ms: number) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

export async function Online_Set(context: any) {
    const user = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (user) {
        const user_online = await prisma.account.update({ where: { id: user.id }, data: { online: new Date() } })
        //await Logger(`(online) ~ change online from ${user.online} on ${user_online.online} for <user> ‚Ññ${context.senderId}`)
    }
}

export async function Worker_Checker() {
    
    await Send_Message_NotSelf(Number(chat_id_system), `‚úÖ –í—Å–µ –æ–∫! ${await Up_Time()}\nüóø –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å!`)
}

async function Up_Time() {
    const now = new Date();
    const diff = now.getTime() - starting_date.getTime();
    const timeUnits = [
        { unit: "–¥–Ω–µ–π", value: Math.floor(diff / 1000 / 60 / 60 / 24) },
        { unit: "—á–∞—Å–æ–≤", value: Math.floor((diff / 1000 / 60 / 60) % 24) },
        { unit: "–º–∏–Ω—É—Ç", value: Math.floor((diff / 1000 / 60) % 60) },
        { unit: "—Å–µ–∫—É–Ω–¥", value: Math.floor((diff / 1000) % 60) },
    ];
    return `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeUnits.filter(({ value }) => value > 0).map(({ unit, value }) => `${value} ${unit}`).join(" ")}`
}

export async function Blank_Inactivity() {
    const datenow: any = new Date()
    const timeouter = 2592000000 //–º–µ—Å—è—Ü
    const timeouter_warn = 2592000000-86400000 //29 –¥–Ω–µ–π
    await Logger(`(system) ~ starting clear blanks inactivity by <system> ‚Ññ0`)
    for (const blank of await prisma.blank.findMany({})) {
        const online_check = await prisma.account.findFirst({ where: { id: blank.id_account } })
        if (!online_check) { continue }
        const dateold: any = new Date(online_check.online)
        if (datenow-dateold > timeouter_warn && datenow-dateold < timeouter) {
            await Sleep(Math.floor(Math.random() * (15000 - 5000 + 1)) + 5000)
            await Send_Message_NotSelf(Number(online_check.idvk), `‚ö† –í—ã –±—ã–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω –±–æ–ª—å—à–µ 29 –¥–Ω–µ–π, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ‚Ññ${blank.id} –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞ —Å –ø–æ–∏—Å–∫–∞ –∑–∞–≤—Ç—Ä–∞!`)
            continue
        }
        if (datenow-dateold > timeouter) {
            await Sleep(Math.floor(Math.random() * (15000 - 5000 + 1)) + 5000)
            const blank_del = await prisma.blank.delete({ where: { id: blank.id } })
            if (!blank_del) { continue }
            await Send_Message_NotSelf(Number(online_check.idvk), `‚õî –í—ã –±—ã–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ‚Ññ${blank.id} —É–¥–∞–ª–µ–Ω–∞! –í–æ—Ç –µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n\n${blank.text}\n\n‚ö† –ï—Å–ª–∏ –≤—ã –≤—Å–µ –µ—â–µ –∏—â–µ—Ç–µ —Å–æ—Ä–æ–ª–∞, —Ç–æ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É`)
            await Send_Message_NotSelf(Number(chat_id_system), `‚ö† –ê–Ω–∫–µ—Ç–∞ ‚Ññ${blank.id} –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.`)
        }
    }
    await Logger(`(system) ~ complete clear blanks inactivity by <system> ‚Ññ0`)
}