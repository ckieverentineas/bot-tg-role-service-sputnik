import { HearManager } from "@puregram/hear";
import { InlineKeyboard, InlineKeyboardBuilder, KeyboardBuilder, MessageContext } from "puregram";
import prisma from "./module/prisma";
import { Accessed, Logger, Online_Set, Send_Message, Send_Message_NotSelf } from "./module/helper";
import { root } from ".";
import { Account } from "@prisma/client";

export function commandUserRoutes(hearManager: HearManager<MessageContext>): void { 
  hearManager.hear(/!–ö–ª–∞–≤–∞|!–∫–ª–∞–≤–∞|\/keyboard/, async (context: any) => {
    if (context.chat.id < 0) { return }
    const keyboard = new KeyboardBuilder().textButton('!—Å–ø—É—Ç–Ω–∏–∫' )
    .textButton(`!–ø–∫–º–µ—Ç—Ä`).resize()
    //await telegram.api.sendMessage({ chat_id: context.chat.id, text: `–ï–º–∞–∞ –ö–ª–∞–≤–∞ –ö–æ–∫–∞ –ø–æ–¥—å–µ—Ö–∞–ª–∞`, reply_markup: keyboard })
    /*.then(async (response: any) => { 
        console.log(response)
        await Sleep(10000)
        return await telegram.api.deleteMessage({ chat_id: response.chat.id, message_id: response.message_id }) })
    .then(async () => { await Logger(`(private chat) ~ succes get keyboard is viewed by <user> ‚Ññ${context.senderId}`) })
    .catch((error) => { console.error(`User ${context.senderId} fail get keyboard: ${error}`) });*/
    await Send_Message(context, `üõ∞ –í—ã–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, ${context.chat.firstName}`, keyboard)
    await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
  })
  // –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫|\/sputnik/, async (context: any) => {
    if (context.chat.id < 0) { return }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!user_check) { return }
    await Online_Set(context)
    const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    const mail_check = await prisma.mail.findFirst({ where: {  blank_to: blank_check?.id ?? 0, read: false, find: true } })
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { cmd: 'blank_self' } })
    .textButton({ text: `${mail_check ? 'üì¨' : 'üì™'} –ü–æ—á—Ç–∞`, payload: { cmd: 'mail_self' } }).row()
    .textButton({ text: '‚öô –¶–µ–Ω–∑—É—Ä–∞', payload: { cmd: 'censored_change' } })
    .textButton({ text: 'üõ†üåê –¢–µ–≥–∞—Ç–æ—Ä', payload: { cmd: 'browser_research' } }).row()
    .textButton({ text: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { cmd: 'random_research' } })
    .textButton({ text: 'üö´ –ö–∞–µ—Ñ', payload: { cmd: 'exit' } }).row()
    if (user_check.donate || await Accessed(context) != `user`) {
      keyboard.textButton({ text: '‚ö∞ –ê—Ä—Ö–∏–≤', payload: { cmd: 'archive_research' } })
      .textButton({ text: `üéØ –°–Ω–∞–π–ø–µ—Ä`, payload: { cmd: 'sniper_research' } }).row()
    }
    if (await Accessed(context) != `user`) {
      keyboard.textButton({ text: '‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è', payload: { cmd: 'moderation_mode' } })
      keyboard.textButton({ text: 'üìä –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ', payload: { cmd: 'list_ban' } }).row()
      keyboard.textButton({ text: 'üìä –î–æ–Ω–∞—Ç–µ—Ä—ã', payload: { cmd: 'list_donate' } })
      keyboard.textButton({ text: 'üìä –ê–¥–º–∏–Ω—ã', payload: { cmd: 'list_admin' } }).row()
    }
    keyboard.textButton({ text: 'üìä –°–ø–∏—Å–æ–∫ –ß–°', payload: { cmd: 'list_banhammer' } })
    keyboard.urlButton({ text: 'üîç –ù–∞–π—Ç–∏ –≤ –í–ö', url: 'https://vk.com/sputnikbot' })
    await Send_Message(context, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${context.chat.firstName}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
    await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
  })
  // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–∫–∏
  hearManager.hear(/!–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == root) {
      const user:any = await prisma.account.findFirst({ where: { idvk: Number(context.chat.id) } })
      const lvlup = await prisma.account.update({ where: { id: user.id }, data: { id_role: 2 } })
      if (lvlup) {
          await Send_Message(context, `‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
          await Logger(`Super user ${context.chat.id} got root`)
      } else {
          await Send_Message(context, `‚öô –û—à–∏–±–∫–∞`)
      }
    }
  })
  // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–∫–∏
  hearManager.hear(/!–ø–æ–º–æ—â—å|\/help/, async (context: any) => {
    if (context.chat.id < 0) { return }
    await Online_Set(context)
    await Send_Message(context, `‚ò† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ:
    \nüë§ !–±–æ–Ω—å–∫—Ö–∞–º–º–µ—Ä @username - –≥–¥–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –°–ø—É—Ç–Ω–∏–∫–µ;
    \nüë• !–ø—Ä–∞–≤–∞ @username - –≥–¥–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –°–ø—É—Ç–Ω–∏–∫–µ;
    \nüë• !–¥–æ–Ω–∞—Ç–µ—Ä @username - –≥–¥–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –≤ –°–ø—É—Ç–Ω–∏–∫–µ;
    \nüë• !–±–∞–Ω @username - –≥–¥–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –≤ –±–∞–Ω –°–ø—É—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
    \n‚ö† –ö–æ–º–∞–Ω–¥—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏:\nüë§ - –î–æ—Å—Ç—É–ø–Ω—ã –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º;\nüë• - –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞;`)
    await Logger(`Super help ${context.chat.id} got root`)
  })
  // –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { id_role: account_check.id_role == 1 ? 2 : 1 } })
      await Send_Message(context, `üîß @${login.username} ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
			await Logger(`(private chat) ~ changed role <${login.id_role == 2 ? 'admin' : 'user'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
    }
  })

  hearManager.hear(/!–±–∞–Ω/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { banned: account_check.banned ? false : true } })
      await Send_Message(context, `üîß @${login.username} ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
			await Logger(`(private chat) ~ banned status changed <${login.banned ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
      const blank_block = await prisma.blank.findFirst({ where: { id_account: login.id } })
      if (!blank_block) { return await Send_Message(context, `‚åõ –£ –ª–∞–º–∏–Ω–∞—Ç–∞ –Ω–µ –±—ã–ª–æ –∞–Ω–∫–µ—Ç—ã!`)}
      const blank_del = await prisma.blank.delete({ where: { id: blank_block.id } })
      await Send_Message(context, `üîß –ê–Ω–∫–µ—Ç–∞ ${blank_del.id} –≤–ª–∞–¥–µ–ª—å—Ü–∞ @${login.username} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n ${blank_del.text}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ${blank_del.id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n ${blank_del.text}`)
    }
  })
  hearManager.hear(/!–±–æ–Ω—å–∫—Ö–∞–º–º–µ—Ä|!—á—Å/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    const account_self:any = await prisma.account.findFirst({ where: { idvk: Number(context.chat.id) } })
    if (!account_self) { return }
    let [ command, target ] = context.text!.split(' ')
    if (typeof target != 'string') { return }
    target = target.replace('@', '')
    const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
    if (!account_check) { 
      await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
      return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
		await Online_Set(context)
    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–∞–≥–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    const black_list_ch = await prisma.blackList.findFirst({ where: { id_account: account_self.id, idvk: account_check.idvk } })
    if (black_list_ch) { 
      const keyboard = new InlineKeyboardBuilder()
      .textButton({ text: 'üìÉ –ê–º–Ω–∏—Å—Ç–∏—è', payload: { cmd: 'unbanhammer', idb:  black_list_ch.id } })
      return await Send_Message(context, `‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${account_check.username} —É–∂–µ –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ö–∞–∫ –±—ã –Ω–∏ —Ö–æ—Ç–µ–ª–æ—Å—å, –Ω–æ –¥–≤–∞–∂–¥—ã –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä—è–¥ –≤ –ß–° –Ω–µ –¥–æ–±–∞–≤–∏—à—å!`, keyboard); 
    }
    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    const blacklist_save = await prisma.blackList.create({ data: { idvk: Number(account_check.idvk), id_account: account_self.id } })
    if (!blacklist_save) { return }
    await Logger(`In database, added new person BL: ${blacklist_save.id}-${blacklist_save.idvk} by admin ${context.senderId}`)
    await context.send(`üîß –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${account_check.username}`)
  })

  hearManager.hear(/!–¥–æ–Ω–∞—Ç–µ—Ä/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { donate: account_check.donate ? false : true } })
      await Send_Message(context, `üîß @${login.username} ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
			await Logger(`(private chat) ~ donate status changed <${login.donate ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
    }
  })
}