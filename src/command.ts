import { HearManager } from "@puregram/hear";
import { InlineKeyboard, InlineKeyboardBuilder, KeyboardBuilder, MediaSourceType, MessageContext} from "puregram";
import prisma from "./module/prisma";
import { Accessed, Logger, Online_Set, Send_Message, Send_Message_NotSelf } from "./module/helper";
import { chat_id_moderate, chat_id_system, root, telegram } from ".";
import { Account } from "@prisma/client";

export function commandUserRoutes(hearManager: HearManager<MessageContext>): void { 
  hearManager.hear(/!–ö–ª–∞–≤–∞|!–∫–ª–∞–≤–∞|\/keyboard/, async (context: any) => {
    if (context.chat.id < 0) { return }
    const keyboard = new KeyboardBuilder().textButton('!—Å–ø—É—Ç–Ω–∏–∫')
    .textButton(`!–ø–∫–º–µ—Ç—Ä`).resize()
    //await telegram.api.sendMessage({ chat_id: context.chat.id, text: `–ï–º–∞–∞ –ö–ª–∞–≤–∞ –ö–æ–∫–∞ –ø–æ–¥—å–µ—Ö–∞–ª–∞`, reply_markup: keyboard })
    /*.then(async (response: any) => { 
        console.log(response)
        await Sleep(10000)
        return await telegram.api.deleteMessage({ chat_id: response.chat.id, message_id: response.message_id }) })
    .then(async () => { await Logger(`(private chat) ~ succes get keyboard is viewed by <user> ‚Ññ${context.senderId}`) })
    .catch((error) => { console.error(`User ${context.senderId} fail get keyboard: ${error}`) });*/
    await Send_Message(context, `üõ∞ –í—ã–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, ${context.chat.firstName}`, keyboard)
    await Logger(`(command center) ~ show keyboard for @${context.chat.id}`)
  })
  // –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫|\/sputnik/, async (context: any) => {
    if (context.chat.id < 0) { return }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
    if (!user_check) { return }
    await Online_Set(context)
    const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    const mail_check = await prisma.mail.findFirst({ where: {  blank_to: blank_check?.id ?? 0, read: false, find: true } })
    const keyboard = new InlineKeyboardBuilder()
    .textButton({ text: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { cmd: 'blank_self' } })
    .textButton({ text: `${mail_check ? 'üì¨' : 'üì™'} –ü–æ—á—Ç–∞`, payload: { cmd: 'mail_self' } }).row()
    .textButton({ text: '‚öô –¶–µ–Ω–∑—É—Ä–∞', payload: { cmd: 'censored_change' } })
    .textButton({ text: 'üåê –¢–µ–≥–∞—Ç–æ—Ä', payload: { cmd: 'tagator_menu' } }).row()
    .textButton({ text: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { cmd: 'random_research' } })
    .textButton({ text: 'üö´ –ö–∞–µ—Ñ', payload: { cmd: 'exit_menu' } }).row()
    if (user_check.donate || await Accessed(context) != `user`) {
      keyboard.textButton({ text: '‚ö∞ –ê—Ä—Ö–∏–≤', payload: { cmd: 'archive_research' } })
      .textButton({ text: `üéØ –°–Ω–∞–π–ø–µ—Ä`, payload: { cmd: 'sniper_research' } }).row()
    }
    if (await Accessed(context) != `user`) {
      keyboard.textButton({ text: '‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è', payload: { cmd: 'moderate_self' } })
      keyboard.textButton({ text: 'üìä –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ', payload: { cmd: 'list_ban' } }).row()
      keyboard.textButton({ text: 'üìä –î–æ–Ω–∞—Ç–µ—Ä—ã', payload: { cmd: 'list_donate' } })
      keyboard.textButton({ text: 'üìä –ê–¥–º–∏–Ω—ã', payload: { cmd: 'list_admin' } }).row()
    }
    keyboard.textButton({ text: 'üìä –°–ø–∏—Å–æ–∫ –ß–°', payload: { cmd: 'list_banhammer' } })
    keyboard.urlButton({ text: 'üîç –ù–∞–π—Ç–∏ –≤ –í–ö', url: 'https://vk.com/sputnikbot' })
    await Send_Message(context, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${context.chat.firstName}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
    await Logger(`(command center) ~ show main menu for @${context.chat.id}`)
  })
  // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–∫–∏
  hearManager.hear(/!–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == root) {
      const user:any = await prisma.account.findFirst({ where: { idvk: Number(context.chat.id) } })
      const lvlup = await prisma.account.update({ where: { id: user.id }, data: { id_role: 2 } })
      if (lvlup) {
          await Send_Message(context, `‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
          await Send_Message_NotSelf(Number(chat_id_moderate), `üîß Super user @${lvlup.username} got root`)
          await Logger(`(command center) ~ root user access for @${context.chat.id}`)
      } else {
          await Send_Message(context, `‚öô –û—à–∏–±–∫–∞`)
      }
    }
  })
  // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω–∫–∏
  hearManager.hear(/!–ø–æ–º–æ—â—å|\/help/, async (context: any) => {
    if (context.chat.id < 0) { return }
    await Online_Set(context)
    await Send_Message(context, 
    `üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ø–∏–∞—Ä–∞, –ø–æ—à–ª–æ—Å—Ç–∏, –≥—Ä—è–∑–∏ –∏ —Ñ–ª—É–¥–∞ –≤ –∞–Ω–∫–µ—Ç–∞—Ö.
    \n‚ò† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
    \nüë§ !–ø–∫–º–µ—Ç—Ä ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫, —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ª–∏–º–∏—Ç–æ–≤ –≤ —Ä–æ–ª–µ–≤–æ–º –ø–æ—Å—Ç–µ;
    \nüë§ !—á—Å @username ‚Äî –≥–¥–µ username ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –°–ø—É—Ç–Ω–∏–∫–µ. –ï—Å–ª–∏ –≤—ã –∏–ª–∏ –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á—Å, —Ç–æ –∞–Ω–∫–µ—Ç—É —Å–≤–æ–µ–≥–æ –Ω–µ–¥—Ä—É–≥–∞ –≤—ã –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ, –∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–µ —É–≤–∏–¥–∏—Ç –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫;
    \nüë• !–ø—Ä–∞–≤–∞ @username ‚Äî –≥–¥–µ username ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –°–ø—É—Ç–Ω–∏–∫–µ;
    \nüë• !–¥–æ–Ω–∞—Ç–µ—Ä @username ‚Äî –≥–¥–µ username ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –≤ –°–ø—É—Ç–Ω–∏–∫–µ;
    \nüë• !–±–∞–Ω @username ‚Äî –≥–¥–µ username ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≥, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –≤ –±–∞–Ω –°–ø—É—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
    \n‚ö† –ö–æ–º–∞–Ω–¥—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏:\nüë§ ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º;\nüë• ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
    \nüîç –†–µ–∂–∏–º—ã –ø–æ–∏—Å–∫–∞:
    \nüé≤ –†–∞–Ω–¥–æ–º ‚Äî —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã;
    \nüåê –¢–µ–≥–∞—Ç–æ—Ä ‚Äî –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏ –≤ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ, –∏ –µ—ë —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç–µ–≥–∏ –Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –∞–Ω–∫–µ—Ç—ã, –∏—Ö –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–≥–∞—Ç–æ—Ä–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–≥–∏, –∏—Å–∫–ª—é—á–∏—Ç–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª;
    \n‚ö∞ –ê—Ä—Ö–∏–≤ ‚Äî —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã. –†–µ–∂–∏–º –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ–Ω–∞–º;
    \nüéØ –°–Ω–∞–π–ø–µ—Ä ‚Äî –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç—ã –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É, –≤ –æ–±—Ö–æ–¥ —á–µ—Ä–Ω–æ–≥–æ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–æ–≤. –†–µ–∂–∏–º –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ–Ω–∞–º.
    \n@space_feedback ‚Äî —Å–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏ –°–ø—É—Ç–Ω–∏–∫–∞, —Ñ–ª—É–¥-—á–∞—Ç, —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –º–∏—Å—Å–∫–ª–∏–∫–Ω—É—Ç–æ–π –∞–Ω–∫–µ—Ç—ã. –ü—Ä–æ—Å—å–±–∞ –¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ç–æ–ª—å–∫–æ —Ç—É—Ç, –∞ –Ω–µ –ª–æ–º–∏—Ç—å—Å—è –≤ –ª–∏—á–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
    \n@beskoletov ‚Äî –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–±–∞–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É: –µ—â–µ –¥–≤—É–º —Ä–µ–∂–∏–º–∞–º –ø–æ–∏—Å–∫–∞ –≤ –°–ø—É—Ç–Ω–∏–∫–µ, –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –ª–∞–π–∫–æ–º.
    \n@poiskcorola ‚Äî –ª—É—á—à–∏–π —Ç–≥ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ—Ä–æ–ª–∞.
    `)
    await Logger(`(command center) ~ show help panel for @${context.chat.id}`)
  })
  // –≤—ã–¥–∞—á–∞ –∞–¥–º–∏–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(command center) ~ not found <user> #${target} by <admin> ‚Ññ${context.chat.id}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { id_role: account_check.id_role == 1 ? 2 : 1 } })
      await Send_Message(context, `üîß @${login.username} ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
      await Send_Message_NotSelf(Number(chat_id_moderate), `üîß @${login.username} ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
      await Logger(`(command center) ~ changed role <${login.id_role == 2 ? 'admin' : 'user'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
    }
  })

  hearManager.hear(/!–±–∞–Ω/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(command center) ~ not found <user> #${target} by <admin> ‚Ññ${context.chat.id}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { banned: account_check.banned ? false : true } })
      await Send_Message(context, `üîß @${login.username} ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
      await Send_Message_NotSelf(Number(chat_id_moderate), `üîß @${login.username} ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
      await Logger(`(command center) ~ banned status changed <${login.banned ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
      const blank_block = await prisma.blank.findFirst({ where: { id_account: login.id } })
      if (!blank_block) { return await Send_Message(context, `‚åõ –£ —Ä–æ–ª–µ–≤–∏–∫–∞ –Ω–µ –±—ã–ª–æ –∞–Ω–∫–µ—Ç—ã!`)}
      const blank_del = await prisma.blank.delete({ where: { id: blank_block.id } })
      await Send_Message(context, `üîß –ê–Ω–∫–µ—Ç–∞ ${blank_del.id} –≤–ª–∞–¥–µ–ª—å—Ü–∞ @${login.username} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n ${blank_del.text}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ${blank_del.id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n ${blank_del.text}`)
    }
  })
  hearManager.hear(/!–±–æ–Ω—å–∫—Ö–∞–º–º–µ—Ä|!—á—Å/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    const account_self:any = await prisma.account.findFirst({ where: { idvk: Number(context.chat.id) } })
    if (!account_self) { return }
    let [ command, target ] = context.text!.split(' ')
    if (typeof target != 'string') { return }
    target = target.replace('@', '')
    const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
    if (!account_check) { 
      await Logger(`(command center) ~ not found <user> #${target} by ‚Ññ${context.chat.id}`)
      return Send_Message(context, `üîß –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–æ–ª–µ–≤–∏–∫ @${target} –µ—â–µ –Ω–µ —É—Å–ø–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–ø—É—Ç–Ω–∏–∫–µ, –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –Ω–µ–¥—Ä—É–≥–∞ –∫ –Ω–∞–º –∏ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ!`);
    }
		await Online_Set(context)
    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–∞–≥–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    const black_list_ch = await prisma.blackList.findFirst({ where: { id_account: account_self.id, idvk: account_check.idvk } })
    if (black_list_ch) { 
      const keyboard = new InlineKeyboardBuilder()
      .textButton({ text: 'üìÉ –ê–º–Ω–∏—Å—Ç–∏—è', payload: { cmd: 'unbanhammer', idb:  black_list_ch.id } })
      return await Send_Message(context, `‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–æ–ª–µ–≤–∏–∫ @${account_check.username} —É–∂–µ –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ö–∞–∫ –±—ã –Ω–∏ —Ö–æ—Ç–µ–ª–æ—Å—å, –Ω–æ –¥–≤–∞–∂–¥—ã –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä—è–¥ –≤ –ß–° –Ω–µ –¥–æ–±–∞–≤–∏—à—å!`, keyboard); 
    }
    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    const blacklist_save = await prisma.blackList.create({ data: { idvk: Number(account_check.idvk), id_account: account_self.id } })
    if (!blacklist_save) { return }
    await Logger(`(command center) ~ added new person BL: ${blacklist_save.id}-${blacklist_save.idvk} by ‚Ññ${context.chat.id}`)
    await context.send(`üîß –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–≤–∏–∫–∞ @${account_check.username}`)
  })

  hearManager.hear(/!–¥–æ–Ω–∞—Ç–µ—Ä/, async (context: MessageContext) => {
    if (context.chat.id < 0) { return }
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(command center) ~ not found <user> #${target} by <admin> ‚Ññ${context.chat.id}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { donate: account_check.donate ? false : true } })
      await Send_Message(context, `üîß @${login.username} ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
      await Send_Message_NotSelf(Number(chat_id_moderate), `üîß @${login.username} ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
      await Logger(`(command center) ~ donate status changed <${login.donate ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
    }
  })
  /*
  hearManager.hear(/!—Ñ–æ—Ç–æ/, async (context: any) => {
    console.log(context)
    if (context.chat.id < 0) { return }
    const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!user_check) { return }
    await Online_Set(context)
    await telegram.api.sendPhoto({ chat_id: context.chat.id, photo: context!.attachment.bigSize.fileId, caption: `–ó–¥–µ—Å—å –º–æ–≥ –±—ã—Ç—å —Ç—Ä–æ–π–Ω–∏—á–æ–∫`})
    await telegram.api.sendPhoto({ chat_id: String(chat_id_moderate), photo: context!.attachment.bigSize.fileId, caption: `–ó–¥–µ—Å—å –º–æ–≥ –±—ã—Ç—å —Ç—Ä–æ–π–Ω–∏—á–æ–∫`})
   //await context.sendPhoto(`${}`)

    await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
  })
  */

  hearManager.hear(/!–µ–Ω–æ—Ç–∏–∫/, async (context: MessageContext) => {
		if (context.chat.id < 0) { return }
		const user_check = await prisma.account.findFirst({ where: { idvk: context.chat.id } })
		if (!user_check) { return }
    if (context.chat.id != Number(root) && user_check.id_role != 2) { return }
		await Online_Set(context)
    await telegram.api.sendDocument( {chat_id: context.chat.id, document: {value: './prisma/sputnik-tg.db', type: MediaSourceType.Path }, caption: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
    await Send_Message_NotSelf(Number(chat_id_system), `‚Äº @${user_check.username}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`)
    await Logger(`(command center) ~ did backup database by <admin> ‚Ññ${context.chat.id}`)
    })
}