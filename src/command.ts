import { HearManager } from "@puregram/hear";
import { InlineKeyboard, MessageContext } from "puregram";
import prisma from "./module/prisma";
import { Accessed, Logger, Send_Message, Send_Message_NotSelf } from "./module/helper";
import { root } from ".";
import { Account } from "@prisma/client";

export function commandUserRoutes(hearManager: HearManager<MessageContext>): void { 
  hearManager.hear(
      '/strict',
      async (context) => await context.send('triggered by a strict string')
  )
  // –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫/, async (context: any) => {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!user_check) { return }
    //await Online_Set(context)
    const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
    const mail_check = await prisma.mail.findFirst({ where: {  blank_to: blank_check?.id ?? 0, read: false, find: true } })
    const keyboard = InlineKeyboard.keyboard([
      [ 
        InlineKeyboard.textButton({ text: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { cmd: 'blank_self' } }),
        InlineKeyboard.textButton({ text: `${mail_check ? 'üì¨' : 'üì™'} –ü–æ—á—Ç–∞`, payload: { cmd: 'mail_self' } })
      ],
      [ 
        InlineKeyboard.textButton({ text: '‚öô –¶–µ–Ω–∑—É—Ä–∞', payload: { cmd: 'censored_change' } }),
        InlineKeyboard.textButton({ text: '‚ò† –ë–∞–Ω—Ö–∞–º–º–µ—Ä', payload: { cmd: 'banhammer_self' } })
      ],
      [
        InlineKeyboard.textButton({ text: 'üåê –ë—Ä–∞—É–∑–µ—Ä', payload: { cmd: 'browser_research' } }),
        InlineKeyboard.textButton({ text: 'üîç –ü–æ–∏—Å–∫', payload: { cmd: 'basic_research' } })
      ],
      [
        InlineKeyboard.textButton({ text: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { cmd: 'random_research' } }),
        InlineKeyboard.textButton({ text: 'üìê –ü–∫–º–µ—Ç—Ä', payload: { cmd: 'pkmetr' } })
      ],
      (user_check.donate || await Accessed(context) != `user`) ?
      [
        InlineKeyboard.textButton({ text: 'üîß –ü–ª–∞–≥–∏–Ω—ã', payload: { cmd: 'sub_menu' } }),
        InlineKeyboard.textButton({ text: 'üö´ –ö–∞–µ—Ñ', payload: { cmd: 'exit' } })
      ] :
      [
        InlineKeyboard.textButton({ text: 'üö´ –ö–∞–µ—Ñ', payload: { cmd: 'exit' } })
      ]
    ])
    await Send_Message(context, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${context.chat.firstName}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
    await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
  })
  // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é
  hearManager.hear(/üîß –ü–ª–∞–≥–∏–Ω—ã|! –ü–ª–∞–≥–∏–Ω|!–ø–ª–∞–≥–∏–Ω/, async (context: any) => {
    const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!user_check) { return }
    //await Online_Set(context)
    const keyboard = InlineKeyboard.keyboard([
      [ 
        InlineKeyboard.textButton({ text: '‚ö∞ –ê—Ä—Ö–∏–≤', payload: { cmd: 'archive_self' } }),
        InlineKeyboard.textButton({ text: `üéØ –°–Ω–∞–π–ø–µ—Ä`, payload: { cmd: 'sniper_self' } })
      ],
      (await Accessed(context) != `user`) ?
      [
        InlineKeyboard.textButton({ text: '‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è', payload: { cmd: 'moderation_mode' } }),
        InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
      ] :
      [
        InlineKeyboard.textButton({ text: 'üö´ –ù–∞–∑–∞–¥', payload: { cmd: 'main_menu' } })
      ]
    ])
    await Send_Message(context, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${context.chat.firstName}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!`, keyboard)
    await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
  })
  hearManager.hear(/!–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
    if (context.chat.id == root) {
      const user:any = await prisma.account.findFirst({ where: { idvk: Number(context.chat.id) } })
      const lvlup = await prisma.account.update({ where: { id: user.id }, data: { id_role: 2 } })
      if (lvlup) {
          await Send_Message(context, `‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
          console.log(`Super user ${context.chat.id} got root`)
      } else {
          await Send_Message(context, `‚öô –û—à–∏–±–∫–∞`)
      }
    }
  })
  hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context: MessageContext) => {
    if (context.chat.id == Number(root) || await Accessed(context) != 'user') {
      let [ command, target ] = context.text!.split(' ')
      if (typeof target != 'string') { return }
      target = target.replace('@', '')
      const account_check: Account | null = await prisma.account.findFirst({ where: { username: target } })
      if (!account_check) { 
        await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
        return Send_Message(context, `üîß @${target} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
			//await Online_Set(context)
      const login = await prisma.account.update({ where: { id: account_check.id }, data: { id_role: account_check.id_role == 1 ? 2 : 1 } })
      await Send_Message(context, `üîß @${login.username} ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
			await Send_Message_NotSelf( Number(login.idvk), `üîß –í—ã ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
			await Logger(`(private chat) ~ changed role <${login.id_role == 2 ? 'admin' : 'user'}> for #${login.idvk} by <admin> ‚Ññ${context.chat.id}`)
    }
  })
}